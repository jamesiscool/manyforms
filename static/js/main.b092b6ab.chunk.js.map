{"version":3,"sources":["display/Description.tsx","state/ValuesContainer.ts","validation/ruleValidatorMap.ts","state/ValidationContainer.ts","display/Label.tsx","display/FieldChrome.tsx","formElements/formElementTypes.tsx","formElements/pagination/Accordion.tsx","formElements/input/Dropdown.tsx","formElements/input/TextInput.tsx","formElements/output/Heading.tsx","formElements/output/Paragraph.tsx","formElements/input/ButtonGroup.tsx","formElements/collection/List.tsx","util.ts","formElements/ChildFormElements.tsx","Form.tsx","index.tsx"],"names":["Description","props","react_default","a","createElement","id","fieldPath","className","text","ValuesContainer","createContainer","initialState","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","formValues","setFormValues","setValue","path","value","nextFormValues","produce","draftFormValues","set","getValue","get","addToCollection","oldCollection","newCollection","concat","toConsumableArray","console","log","deleteFromCollection","index","slice","getCollectionSize","collection","ruleValidatorMap","email","validate","isEmail","defaultMessage","alpha","isAlpha","numeric","isNumeric","alphanumeric","isAlphanumeric","currency","isCurrency","ValidationContainer","valuesContainer","useContainer","fieldDef","validation","foundValue","required","rules","firstRuleThatFails","find","validationRuleDef","name","message","Label","htmlFor","error","FieldChrome","def","attributes","label","Label_Label","children","description","Description_Description","formElementTypes","accordion","currentPageRef","useRef","currentPage","setCurrentPage","isFirst","isLast","definition","goToPage","newIndex","current","window","scroll","top","getBoundingClientRect","role","aria-multiselectable","map","page","key","ref","onClick","ChildFormElements_ChildFormElements","childFormElements","parentFieldPath","aria-label","dropdown","formValuesContainer","FieldChrome_FieldChrome","fieldId","onChange","event","currentTarget","aria-describedby","disabled","options","option","textInput","type","heading","React","level","paragraph","buttonGroup","focus","setFocus","onFocus","onBlur","checked","list","times","n","s","v","ordinal","itemLabel","aria-hidden","ChildFormElements","elementDef","Child","foundType","warn","lookupElement","Form","Provider","formDef","elements","fetch","then","response","ok","Error","statusText","json","ReactDOM","render","Form_Form","document","getElementById"],"mappings":"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","file":"static/js/main.b092b6ab.chunk.js","sourcesContent":["import React from \"react\"\n\ninterface DescriptionProps {\n    fieldPath: string,\n    text: string\n}\n\nexport const Description = (props: DescriptionProps) => (\n    <div id={props.fieldPath + '_description'} className=\"pt-2 text-muted description\">{props.text}</div>\n)","import produce from \"immer\"\r\nimport get from 'lodash-es/get'\r\nimport set from 'lodash-es/set'\r\nimport {useState} from \"react\"\r\nimport {createContainer} from \"unstated-next\"\r\n\r\nexport function useFormValues(initialState = {}) {\r\n    const [formValues, setFormValues] = useState(initialState)\r\n    const setValue = (path: string, value: any) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            set(draftFormValues, path, value)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const getValue = (path: string): string => {\r\n        return get(formValues, path)\r\n    }\r\n    const addToCollection = (path: string) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            const oldCollection = get(draftFormValues, path, [])\r\n            const newCollection = [...oldCollection, {}]\r\n            console.log('newCollection:', newCollection)\r\n            set(draftFormValues, path, newCollection)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const deleteFromCollection = (path: string, index: number) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            const oldCollection = get(draftFormValues, path)\r\n            const newCollection = [...oldCollection.slice(0, index), ...oldCollection.slice(index + 1)]\r\n            set(draftFormValues, path, newCollection)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const getCollectionSize = (path: string) => {\r\n        const collection = get(formValues, path)\r\n        return collection ? collection.length : 0\r\n    }\r\n    return {formValues, setValue, getValue, addToCollection, deleteFromCollection, getCollectionSize}\r\n}\r\n\r\nexport const ValuesContainer = createContainer(useFormValues)","import isAlpha from 'validator/lib/isAlpha'\nimport isAlphanumeric from 'validator/lib/isAlphanumeric'\nimport isCurrency from 'validator/lib/isCurrency'\nimport isEmail from 'validator/lib/isEmail'\nimport isNumeric from 'validator/lib/isNumeric'\n\ninterface RuleValidator {\n    validate: (value: string) => boolean,\n    defaultMessage: string\n}\n\nexport const ruleValidatorMap: { [name: string]: RuleValidator } = {\n    email: {\n        validate: (value: string) => {\n            return isEmail(value)\n        },\n        defaultMessage: 'Please enter a email address'\n    },\n    alpha: {\n        validate: (value: string) => {\n            return isAlpha(value)\n        },\n        defaultMessage: 'Please enter only letters'\n    },\n    numeric: {\n        validate: (value: string) => {\n            return isNumeric(value)\n        },\n        defaultMessage: 'Please enter only numbers'\n    },\n    alphanumeric: {\n        validate: (value: string) => {\n            return isAlphanumeric(value)\n        },\n        defaultMessage: 'Please enter only letters and numbers'\n    },\n    currency: {\n        validate: (value: string) => {\n            return isCurrency(value)\n        },\n        defaultMessage: 'Please enter a currency amount'\n    }\n}","import {createContainer, useContainer} from \"unstated-next\"\r\nimport {FormElementDef} from \"../formElements/FormElementDef\"\r\nimport {ruleValidatorMap} from \"../validation/ruleValidatorMap\"\r\nimport ValidationRuleDef from \"../validation/ValidationRuleDef\"\r\nimport {ValuesContainer} from \"./ValuesContainer\"\r\n\r\nfunction useValidation() {\r\n    const valuesContainer = useContainer(ValuesContainer)\r\n    const validate = (path: string, fieldDef: FormElementDef<{}>): string | undefined => {\r\n        if (!fieldDef.validation) {\r\n            return undefined\r\n        }\r\n        const foundValue = valuesContainer.getValue(path)\r\n        if (fieldDef.validation.required && (!foundValue || foundValue.length <= 0)) {\r\n            return 'This field is required'\r\n        }\r\n        if (fieldDef.validation.rules) {\r\n            const firstRuleThatFails = fieldDef.validation.rules.find((validationRuleDef: ValidationRuleDef) => {\r\n                return !ruleValidatorMap[validationRuleDef.name].validate(foundValue)\r\n            })\r\n            if (firstRuleThatFails) {\r\n                return firstRuleThatFails.message || ruleValidatorMap[firstRuleThatFails.name].defaultMessage\r\n            }\r\n        }\r\n        return undefined\r\n    }\r\n    return {validate}\r\n}\r\n\r\nexport const ValidationContainer = createContainer(useValidation)","import React from \"react\"\n\ninterface LabelProps {\n    text: string,\n    htmlFor: string,\n    error: boolean\n}\n\nexport const Label = (props: LabelProps) => <label htmlFor={props.htmlFor} className={'mr-2 h5 ' + (props.error ? 'text-danger' : '')}>{props.text}</label>","import React from \"react\"\nimport {useContainer} from \"unstated-next\"\nimport {FormElementDef} from \"../formElements/FormElementDef\"\nimport {ValidationContainer} from \"../state/ValidationContainer\"\nimport {Description} from \"./Description\"\nimport {Label} from \"./Label\"\n\n\ninterface FieldChromeProps {\n    fieldPath: string\n    def: FormElementDef<any>\n    children: React.ReactNode\n}\n\nexport const FieldChrome = (props: FieldChromeProps) => {\n    const validationContainer = useContainer(ValidationContainer)\n    const error = validationContainer.validate(props.fieldPath, props.def)\n\n    return (<div className=\"form-group py-2\">\n        {props.def.attributes.label && <Label htmlFor={props.fieldPath} text={props.def.attributes.label} error={!!error}/>}\n        {props.children}\n        {props.def.attributes.description && <Description fieldPath={props.fieldPath} text={props.def.attributes.description}/>}\n        {error && <div className=\"text-danger pt-2\">{error}</div>}\n    </div>)\n}","import React from \"react\"\r\nimport {List} from \"./collection/List\"\r\nimport {ButtonGroup} from \"./input/ButtonGroup\"\r\nimport {Dropdown} from \"./input/Dropdown\"\r\nimport {TextInput} from \"./input/TextInput\"\r\nimport {Heading} from \"./output/Heading\"\r\nimport {Paragraph} from \"./output/Paragraph\"\r\nimport {Accordion} from \"./pagination/Accordion\"\r\n\r\nexport const formElementTypes: { [type: string]: any } = {\r\n    'accordion': Accordion,\r\n    'dropdown': Dropdown,\r\n    'textInput': TextInput,\r\n    'heading': Heading,\r\n    'paragraph': Paragraph,\r\n    'buttonGroup': ButtonGroup,\r\n    'list': List\r\n}\r\n\r\nexport const lookupElement = (type: string): any => {\r\n    const foundType = formElementTypes[type]\r\n    if (!foundType) {\r\n        console.warn('Could not find form element type:' + type)\r\n        return () => <div>Could not find form element type {type}.</div>\r\n    }\r\n    return foundType\r\n}","import React, {useRef, useState} from \"react\"\nimport {ChildFormElements} from \"../ChildFormElements\"\nimport {FormElementDef} from \"../FormElementDef\"\nimport {FormElementProps} from \"../FormElementProps\"\n\nexport interface AccordionAttributes {\n}\n\nexport const Accordion = (props: FormElementProps<AccordionAttributes>) => {\n    const currentPageRef = useRef<HTMLDivElement>(null)\n    const [currentPage, setCurrentPage] = useState<number>(0)\n    const isFirst = currentPage === 0\n    const isLast = currentPage === (props.definition.children!.length - 1)\n\n    const goToPage = (newIndex: number) => {\n        console.log('goToPage:', newIndex)\n        setCurrentPage(newIndex)\n        if (currentPageRef && currentPageRef.current) {\n            window.scroll({top: currentPageRef.current.getBoundingClientRect().top - 100})\n        }\n    }\n\n    return (\n        <div className=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n            {props.definition.children!.map((page, index) => (\n                <div className=\"card\" key={props.fieldPath + '_PAGE_' + index}>\n                    {currentPage === index && <div ref={currentPageRef}/>}\n                    <div className=\"card-header cursor-pointer\" onClick={() => goToPage(index)}>\n                        <h3 className=\"d-inline\">{page.attributes.label}</h3>{index < currentPage && <button className=\"link-button text-muted px-1\" onClick={() => goToPage(index)}><u>edit</u></button>}\n                    </div>\n                    {currentPage === index && <div className=\"card-body m-1\">\n                        {page.children && <ChildFormElements childFormElements={page.children as FormElementDef<any>[]} parentFieldPath={props.parentFieldPath}/>}\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <nav aria-label=\"Page navigation example\">\n                                    <ul className=\"pagination mb-0\">\n                                        {!isFirst && <li className=\"page-item\">\n                                            <button className=\"page-link text-primary\" onClick={() => goToPage(currentPage - 1)}>Previous</button>\n                                        </li>}\n                                        {!isLast && <li className=\"page-item\">\n                                            <button className=\"page-link text-primary\" onClick={() => goToPage(currentPage + 1)}>Next</button>\n                                        </li>}\n                                    </ul>\n                                </nav>\n                            </div>\n                            {isLast &&\n                            <div className=\"col\">\n                                <button className=\"btn btn-primary float-right\" onClick={() => console.log('Submit')}>Submit</button>\n                            </div>}\n                        </div>\n                    </div>}\n                </div>\n            ))}\n        </div>\n    )\n}","import React from \"react\"\nimport {FieldChrome} from \"../../display/FieldChrome\"\nimport {ValuesContainer} from \"../../state/ValuesContainer\"\nimport {FormElementProps} from \"../FormElementProps\"\n\nexport interface DropdownAttributes {\n    label: string\n    description: string\n    info?: string\n    options: string[]\n}\n\nexport const Dropdown = (props: FormElementProps<DropdownAttributes>) => {\n    const formValuesContainer = ValuesContainer.useContainer()\n    return <FieldChrome fieldPath={props.fieldPath} def={props.definition}>\n        <select\n            className=\"form-control custom-select\"\n            id={props.definition.fieldId}\n            value={formValuesContainer.getValue(props.fieldPath) || ''}\n            onChange={event => formValuesContainer.setValue(props.fieldPath, event.currentTarget.value)}\n            aria-describedby={props.definition.fieldId + '_description'}\n            //onBlur={() => props.setState({path: props.fieldPath, name: 'touched', value: true})}\n        >\n            <option value=\"\" disabled={props.definition.validation && props.definition.validation.required}/>\n            {props.definition.attributes.options.map((option) => <option value={option} key={option}>{option}</option>)}\n        </select>\n    </FieldChrome>\n}","import React from \"react\"\nimport {FieldChrome} from \"../../display/FieldChrome\"\nimport {ValuesContainer} from \"../../state/ValuesContainer\"\nimport {FormElementProps} from \"../FormElementProps\"\n\ninterface TextInputAttributes {\n    label: string\n    description: string\n    info?: string\n}\n\nexport const TextInput = (props: FormElementProps<TextInputAttributes>) => {\n    const formValuesContainer = ValuesContainer.useContainer()\n    return (<FieldChrome fieldPath={props.fieldPath} def={props.definition}>\n        <input\n            type=\"text\"\n            className=\"form-control\"\n            id={props.definition.fieldId}\n            aria-describedby={props.fieldPath + '_description'}\n            value={formValuesContainer.getValue(props.fieldPath) || ''}\n            onChange={event => formValuesContainer.setValue(props.fieldPath, event.currentTarget.value)}\n            //onBlur={() => props.setState({path: props.fieldPath, name: 'touched', value: true})}\n        />\n    </FieldChrome>)\n}","import React from \"react\"\nimport {FormElementProps} from \"../FormElementProps\"\n\ninterface HeadingAttributes {\n    level: number\n    text: string\n}\n\nexport const Heading = (props: FormElementProps<HeadingAttributes>) =>\n    React.createElement('h' + props.definition.attributes.level, null, props.definition.attributes.text)","import React from \"react\"\nimport {FormElementProps} from \"../FormElementProps\"\n\n\ninterface ParagraphAttributes {\n    text: string\n}\n\nexport const Paragraph = (props: FormElementProps<ParagraphAttributes>) => <p>{props.definition.attributes.text}</p>","import React, {useState} from \"react\"\nimport {FieldChrome} from \"../../display/FieldChrome\"\nimport {ValuesContainer} from \"../../state/ValuesContainer\"\nimport {FormElementProps} from \"../FormElementProps\"\n\ninterface ButtonGroupAttributes {\n    label: string\n    description?: string\n    info?: string\n    options: string[]\n}\n\nexport const ButtonGroup = (props: FormElementProps<ButtonGroupAttributes>) => {\n    const formValuesContainer = ValuesContainer.useContainer()\n    const value = formValuesContainer.getValue(props.fieldPath)\n    const [focus, setFocus] = useState<number | null>(null)\n    return (\n        <FieldChrome fieldPath={props.fieldPath} def={props.definition}>\n            <div className=\"btn-group-wrapper\">\n                <div className=\"btn-group btn-group-toggle\">\n                    {props.definition.attributes.options.map((option, index) => (\n                        <label className={'btn btn-outline-secondary' + (value === option ? ' active' : '') + (focus === index ? ' focus' : '')} key={props.fieldPath + '_OPTION_' + option} onFocus={() => setFocus(index)} onBlur={() => setFocus(null)}>\n                            <input\n                                type=\"radio\"\n                                value={option}\n                                checked={option === value}\n                                onChange={event => formValuesContainer.setValue(props.fieldPath, event.currentTarget.value)}\n                            />{option}\n                        </label>))\n                    }\n                </div>\n            </div>\n        </FieldChrome>)\n}","import {times} from \"lodash-es\"\nimport React from \"react\"\nimport {Description} from \"../../display/Description\"\nimport {ValuesContainer} from \"../../state/ValuesContainer\"\nimport {ordinal} from \"../../util\"\nimport {ChildFormElements} from \"../ChildFormElements\"\nimport {FormElementProps} from \"../FormElementProps\"\n\n\nexport interface IterationAttributes {\n    label: string\n    itemLabel: string\n    description: string\n}\n\nexport const List = (props: FormElementProps<IterationAttributes>) => {\n    let formValuesContainer = ValuesContainer.useContainer()\n    return (\n        <div className=\"form-group\">\n            <span className=\"h4 align-middle mr-2\">{props.definition.attributes.label}</span>\n            {props.definition.attributes.description && <Description fieldPath={props.fieldPath} text={props.definition.attributes.description}/>}\n            {times(formValuesContainer.getCollectionSize(props.fieldPath), (index: number) =>\n                <div className={'card border-bottom mb-3' + (index === 0 ? ' mt-2' : '')} key={props.fieldPath + '_COLLECTION_' + index}>\n                    <h5 className=\"card-header\">{ordinal(index + 1)} {props.definition.attributes.itemLabel}\n                        <button className=\"close text-dark\" onClick={() => formValuesContainer.deleteFromCollection(props.fieldPath, index)}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </h5>\n                    <div className=\"card-body pb-0\">\n                        {props.definition.children && <ChildFormElements childFormElements={props.definition.children} parentFieldPath={props.fieldPath + '[' + index + ']'}/>}\n                    </div>\n                </div>\n            )}\n            <button className=\"btn btn-secondary d-inline\" onClick={() => formValuesContainer.addToCollection(props.fieldPath)}>Add</button>\n        </div>)\n}\n","//export const createKey = () => (Math.random() + 1).toString(36).substring(2)\n\nexport const ordinal = (n: number): string => {\n    const s = ['th', 'st', 'nd', 'rd'],\n        v = n % 100\n    return n + (s[(v - 20) % 10] || s[v] || s[0])\n}\n\nexport const createFiledPath = (parentFieldPath: string, fieldId?: string): string => {\n    if (!fieldId) {\n        return parentFieldPath\n    }\n    if (parentFieldPath !== '') {\n        return parentFieldPath + '.' + fieldId\n    }\n    return fieldId\n\n}","import React from \"react\"\r\nimport {createFiledPath} from \"../util\"\r\nimport {FormElementDef} from \"./FormElementDef\"\r\nimport {lookupElement} from \"./formElementTypes\"\r\n\r\ninterface ChildFormElementsProps {\r\n    childFormElements: FormElementDef<any>[]\r\n    parentFieldPath: string\r\n}\r\n\r\nexport const ChildFormElements = (props: ChildFormElementsProps) => {\r\n    //console.log('ChildFormElements', props)\r\n    return (\r\n        <div>\r\n            {props.childFormElements.map((elementDef, index) => {\r\n                const Child: any = lookupElement(elementDef.type)\r\n                return React.createElement(Child, {\r\n                    definition: elementDef,\r\n                    parentFieldPath: props.parentFieldPath,\r\n                    fieldPath: createFiledPath(props.parentFieldPath, elementDef.fieldId),\r\n                    key: props.parentFieldPath + '_' + index\r\n                })\r\n            })}\r\n        </div>)\r\n}","import React from \"react\"\nimport FormDef from \"./FormDef\"\nimport {ChildFormElements} from \"./formElements/ChildFormElements\"\nimport {ValidationContainer} from \"./state/ValidationContainer\"\nimport {ValuesContainer} from \"./state/ValuesContainer\"\n\nexport interface FormProps {\n    formDef: FormDef\n}\n\nexport const Form = (props: FormProps) =>\n    (<div className=\"p-2 container\">\n        <ValuesContainer.Provider>\n            <ValidationContainer.Provider>\n                <ChildFormElements childFormElements={props.formDef.elements} parentFieldPath=\"\"/>\n            </ValidationContainer.Provider>\n        </ValuesContainer.Provider>\n    </div>)","import React from \"react\"\nimport ReactDOM from 'react-dom'\nimport {Form} from \"./Form\"\nimport FormDef from \"./FormDef\"\nimport './index.css'\n\nfetch('exampleFormDefinition.json')\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(response.statusText)\n        }\n        return response.json()\n    })\n    .then((formDef: FormDef) => {\n        ReactDOM.render(\n            <Form formDef={formDef}/>,\n            document.getElementById('form')\n        )\n    })"],"sourceRoot":""}