{"version":3,"sources":["util.ts","display/Description.tsx","state/FieldStateContainer.ts","state/ValuesContainer.ts","validation/ValidationRule.ts","state/ConfigContainer.ts","state/ExpressionContainer.ts","state/FormStateContainer.ts","state/ValidationContainer.ts","FormDef.ts","formElements/formElementTypes.tsx","display/Label.tsx","display/FieldChrome.tsx","formElements/pagination/Accordion.tsx","formElements/input/Dropdown.tsx","formElements/input/TextInput.tsx","formElements/output/Heading.tsx","formElements/output/Paragraph.tsx","formElements/input/ButtonGroup.tsx","formElements/collection/List.tsx","formElements/ChildFormElements.tsx","Form.tsx","index.tsx"],"names":["createFiledPath","parentPath","fieldId","Description","props","react_default","a","createElement","id","path","className","text","FieldStateContainer","createContainer","_useState","useState","_useState2","Object","slicedToArray","fieldStates","setFieldStates","setEventNow","event","nextFieldStates","produce","draftFieldStates","fieldState","Date","now","get","focus","valueChanged","blur","ValuesContainer","initialState","arguments","length","undefined","fieldStateContainer","useContainer","formValues","setFormValues","setValue","value","nextFormValues","draftFormValues","set","getValue","addToCollection","oldCollection","newCollection","concat","toConsumableArray","deleteFromCollection","index","slice","getCollectionSize","collection","validationRuleMap","required","validate","defaultMessage","email","isEmail","alpha","isAlpha","numeric","isNumeric","alphanumeric","isAlphanumeric","currency","isCurrency","defaultConfig","showErrors","showErrorsDelay","disableNextWhenErrors","ConfigContainer","userConfig","config","assign","jexl","addTransform","val","toUpperCase","toLowerCase","addBinaryOp","left","right","ExpressionContainer","valuesContainer","evaluate","fieldDef","expression","fieldValue","context","evalSync","expressionValidations","validIf","invalidIf","requiredIf","FormStateContainer","formState","setFormState","nextClicked","nextFormStates","draftFormState","clearNextClicked","submitClicked","nextOrSubmit","ValidationContainer","formStateContainer","expressionContainer","nextTick","setNextTick","useEffect","setTimeout","validation","reduce","message","constraint","validationRule","isValidationExpresionDef","expressionValidation","name","validateConstraint","shouldShowErrors","timeHasPassedAndShouldShowError","time","validateAndShouldShow","validateRecursively","children","some","childFieldDef","type","childPath","formElementCollectionTypes","hasOwnProperty","size","Label","htmlFor","error","FieldChrome","def","attributes","label","Label_Label","description","Description_Description","formElementNonCollectionTypes","accordion","validationContainer","currentPageRef","useRef","currentPage","setCurrentPage","definition","isFirst","isLast","currentPageHasErrors","disableNext","goToPage","newIndex","current","window","scroll","top","getBoundingClientRect","previous","next","submit","console","log","role","aria-multiselectable","map","page","key","ref","onClick","ChildFormElements_ChildFormElements","childFormElements","aria-label","classNames","disabled","dropdown","formValuesContainer","FieldChrome_FieldChrome","onChange","currentTarget","aria-describedby","onFocus","onBlur","options","option","textInput","heading","React","level","paragraph","buttonGroup","setFocus","checked","list","times","n","s","v","ordinal","itemLabel","aria-hidden","formElementTypes","ChildFormElements","elementDef","Child","foundType","warn","lookupElement","Form","Provider","formDef","elements","axios","then","response","ReactDOM","render","Form_Form","data","document","getElementById","catch","Error"],"mappings":"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","file":"static/js/main.901388f5.chunk.js","sourcesContent":["//export const createKey = () => (Math.random() + 1).toString(36).substring(2)\n\nexport const ordinal = (n: number): string => {\n    const s = ['th', 'st', 'nd', 'rd'],\n        v = n % 100\n    return n + (s[(v - 20) % 10] || s[v] || s[0])\n}\n\nexport const createFiledPath = (parentPath: string, fieldId?: string): string => {\n    if (!fieldId) {\n        return parentPath\n    }\n    if (parentPath !== '') {\n        return parentPath + '.' + fieldId\n    }\n    return fieldId\n\n}","import React from 'react'\n\ninterface DescriptionProps {\n    path: string,\n    text: string\n}\n\nexport const Description = (props: DescriptionProps) => (\n    <div id={props.path + '_description'} className=\"pt-2 text-muted description\">{props.text}</div>\n)","import produce from 'immer'\r\nimport {useState} from 'react'\r\nimport {createContainer} from 'unstated-next'\r\n\r\ntype Events = 'focus' | 'valueChanged' | 'blur'\r\n\r\ntype FieldState = {\r\n    [Event in Events]: number //Date.now() when field first got focused\r\n}\r\n\r\nexport function useFieldState() {\r\n    const [fieldStates, setFieldStates] = useState<{ [path: string]: FieldState }>({})\r\n    const get = (path: string) => fieldStates[path] || {}\r\n    const setEventNow = (path: string, event: Events) => {\r\n        const nextFieldStates = produce(fieldStates, draftFieldStates => {\r\n                const fieldState = draftFieldStates[path] || {}\r\n                if (!fieldState[event]) {\r\n                    fieldState[event] = Date.now()\r\n                }\r\n                draftFieldStates[path] = fieldState\r\n            }\r\n        )\r\n        setFieldStates(nextFieldStates)\r\n    }\r\n    const focus = (path: string) => setEventNow(path, 'focus')\r\n    const valueChanged = (path: string) => setEventNow(path, 'valueChanged')\r\n    const blur = (path: string) => setEventNow(path, 'blur')\r\n\r\n    return {fieldStates, get, focus, valueChanged, blur}\r\n}\r\n\r\nexport const FieldStateContainer = createContainer(useFieldState)","import produce from 'immer'\r\nimport get from 'lodash-es/get'\r\nimport set from 'lodash-es/set'\r\nimport {useState} from 'react'\r\nimport {createContainer, useContainer} from 'unstated-next'\r\nimport {FieldStateContainer} from './FieldStateContainer'\r\n\r\nexport function useValues(initialState = {}) {\r\n    const fieldStateContainer = useContainer(FieldStateContainer)\r\n\r\n    const [formValues, setFormValues] = useState(initialState)\r\n\r\n    const setValue = (path: string, value: any) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            set(draftFormValues, path, value)\r\n        })\r\n        setFormValues(nextFormValues)\r\n        fieldStateContainer.valueChanged(path)\r\n    }\r\n\r\n    function getValue(path: string): string {\r\n        return get(formValues, path)\r\n    }\r\n\r\n    const addToCollection = (path: string) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            const oldCollection = get(draftFormValues, path, [])\r\n            const newCollection = [...oldCollection, {}]\r\n            set(draftFormValues, path, newCollection)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const deleteFromCollection = (path: string, index: number) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            const oldCollection = get(draftFormValues, path)\r\n            const newCollection = [...oldCollection.slice(0, index), ...oldCollection.slice(index + 1)]\r\n            set(draftFormValues, path, newCollection)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const getCollectionSize = (path: string) => {\r\n        const collection = get(formValues, path)\r\n        return collection ? collection.length : 0\r\n    }\r\n    return {formValues, setValue, getValue, addToCollection, deleteFromCollection, getCollectionSize}\r\n}\r\n\r\nexport const ValuesContainer = createContainer(useValues)","import isAlpha from 'validator/lib/isAlpha'\r\nimport isAlphanumeric from 'validator/lib/isAlphanumeric'\r\nimport isCurrency from 'validator/lib/isCurrency'\r\nimport isEmail from 'validator/lib/isEmail'\r\nimport isNumeric from 'validator/lib/isNumeric'\r\n\r\ninterface ValidationRule {\r\n    validate: (value: string, args?: string | string[]) => boolean,\r\n    defaultMessage: string\r\n}\r\n\r\nexport const validationRuleMap: { [name: string]: ValidationRule } = {\r\n    required: {\r\n        validate: (value: string) => !(value == null || value.length <= 0 || value === ''),\r\n        defaultMessage: 'This field is required'\r\n    },\r\n    email: {\r\n        validate: (value: string) => isEmail(value),\r\n        defaultMessage: 'This field must be an email address'\r\n    },\r\n    alpha: {\r\n        validate: (value: string) => isAlpha(value),\r\n        defaultMessage: 'This field must be only letters'\r\n    },\r\n    numeric: {\r\n        validate: (value: string) => isNumeric(value),\r\n        defaultMessage: 'This field must be only numbers'\r\n    },\r\n    alphanumeric: {\r\n        validate: (value: string) => isAlphanumeric(value),\r\n        defaultMessage: 'This field must be only letters and numbers'\r\n    },\r\n    currency: {\r\n        validate: (value: string) => isCurrency(value),\r\n        defaultMessage: 'This field must be a currency amount'\r\n    }\r\n}","import {createContainer} from 'unstated-next'\r\n\r\ntype showErrors = 'immediately' | 'afterFocus' | 'afterValueChanged' | 'afterBlur' | 'nextOrSummit'\r\n\r\nexport interface Config {\r\n    showErrors: showErrors\r\n    showErrorsDelay: number //milliseconds\r\n    disableNextWhenErrors: boolean\r\n}\r\n\r\nconst defaultConfig: Config = {\r\n    showErrors: 'immediately',\r\n    showErrorsDelay: 0,\r\n    disableNextWhenErrors: false\r\n}\r\n\r\nexport const useConfig = (userConfig = {}) => {\r\n    const config = Object.assign(defaultConfig, userConfig)\r\n    return {config}\r\n}\r\n\r\nexport const ConfigContainer = createContainer(useConfig)","import jexl from 'jexl'\r\nimport {createContainer, useContainer} from 'unstated-next'\r\nimport isAlpha from 'validator/lib/isAlpha'\r\nimport isAlphanumeric from 'validator/lib/isAlphanumeric'\r\nimport isCurrency from 'validator/lib/isCurrency'\r\nimport isEmail from 'validator/lib/isEmail'\r\nimport isNumeric from 'validator/lib/isNumeric'\r\nimport {FormElementDef} from '../FormDef'\r\nimport {validationRuleMap} from '../validation/ValidationRule'\r\nimport {ConfigContainer} from './ConfigContainer'\r\nimport {ValuesContainer} from './ValuesContainer'\r\n\r\n//Basic transforms\r\njexl.addTransform('toUpperCase', (val) => val.toUpperCase())\r\njexl.addTransform('toLowerCase', (val) => val.toLowerCase())\r\n\r\n//Transform as a boolean validation\r\njexl.addTransform('isAlpha', (val) => isAlpha(val))\r\njexl.addTransform('isAlphanumeric', (val) => isAlphanumeric(val))\r\njexl.addTransform('isCurrency', (val) => isCurrency(val))\r\njexl.addTransform('isEmail', (val) => isEmail(val))\r\njexl.addTransform('isNumeric', (val) => isNumeric(val))\r\n\r\n//case-insensitive string equality\r\njexl.addBinaryOp('_=', 20, (left, right) => left.toLowerCase() === right.toLowerCase())\r\n\r\ninterface ValidationExpression {\r\n    validate: (path: string, fieldDef: FormElementDef<{}>, expression: string) => boolean,\r\n    defaultMessage: string\r\n}\r\n\r\nfunction useExpression() {\r\n    const config = useContainer(ConfigContainer).config\r\n    const valuesContainer = useContainer(ValuesContainer)\r\n\r\n\r\n    const evaluate = <T>(path: string, fieldDef: FormElementDef<{}>, expression: string): T => {\r\n        const fieldValue = valuesContainer.getValue(path)\r\n        const context = {\r\n            formValues: valuesContainer.formValues,\r\n            fieldValue,\r\n            value: fieldValue,\r\n            config,\r\n            fieldDef\r\n        }\r\n        return jexl.evalSync(expression, context)\r\n    }\r\n\r\n    const expressionValidations: { [name: string]: ValidationExpression } = {\r\n        validIf: {\r\n            validate: (path: string, fieldDef: FormElementDef<{}>, expression: string) => evaluate(path, fieldDef, expression),\r\n            defaultMessage: 'This field is invalid' // The form editor should make the user enter message as this does not give the user any information about why the field is invalid\r\n        },\r\n        invalidIf: {\r\n            validate: (path: string, fieldDef: FormElementDef<{}>, expression: string) => !evaluate(path, fieldDef, expression),\r\n            defaultMessage: 'This field is invalid' // As with validIf form editor should make the user enter message as this does not give the user any information about why the field is invalid\r\n        },\r\n        requiredIf: {\r\n            validate: (path: string, fieldDef: FormElementDef<{}>, expression: string) => {\r\n                if (evaluate(path, fieldDef, expression)) {\r\n                    return validationRuleMap.required.validate(valuesContainer.getValue(path))\r\n                }\r\n                return true\r\n            },\r\n            defaultMessage: validationRuleMap.required.defaultMessage\r\n        }\r\n    }\r\n\r\n    return {evaluate, expressionValidations}\r\n}\r\n\r\nexport const ExpressionContainer = createContainer(useExpression)","import produce from 'immer'\r\nimport {useState} from 'react'\r\nimport {createContainer} from 'unstated-next'\r\n\r\ntype FormState = {\r\n    nextClicked?: number\r\n    submitClicked?: number\r\n    nextOrSubmitClicked?: number //Date.now() when field first got focused\r\n}\r\n\r\nexport function useFormState() {\r\n    const [formState, setFormState] = useState<FormState>({})\r\n\r\n    const nextClicked = () => {\r\n        const nextFormStates = produce(formState, draftFormState => {\r\n                if (!draftFormState.nextClicked) {\r\n                    draftFormState.nextClicked = Date.now()\r\n                }\r\n            }\r\n        )\r\n        setFormState(nextFormStates)\r\n    }\r\n\r\n    const clearNextClicked = () => {\r\n        const nextFormStates = produce(formState, draftFormState => {\r\n                draftFormState.nextClicked = undefined\r\n            }\r\n        )\r\n        setFormState(nextFormStates)\r\n\r\n    }\r\n\r\n    const submitClicked = () => {\r\n        const nextFormStates = produce(formState, draftFormState => {\r\n                if (!draftFormState.submitClicked) {\r\n                    draftFormState.submitClicked = Date.now()\r\n                }\r\n            }\r\n        )\r\n        setFormState(nextFormStates)\r\n    }\r\n\r\n    const nextOrSubmit = (): boolean => {\r\n        return !!formState.nextClicked || !!formState.submitClicked\r\n    }\r\n\r\n    return {formState, nextClicked, clearNextClicked, submitClicked, nextOrSubmit}\r\n}\r\n\r\nexport const FormStateContainer = createContainer(useFormState)","import {useEffect, useState} from 'react'\r\nimport {createContainer, useContainer} from 'unstated-next'\r\nimport {FormElementDef, isValidationExpresionDef, ValidationConstraintDef} from '../FormDef'\r\nimport {isTypeACollection} from '../formElements/formElementTypes'\r\nimport {createFiledPath} from '../util'\r\nimport {validationRuleMap} from '../validation/ValidationRule'\r\nimport {ConfigContainer} from './ConfigContainer'\r\nimport {ExpressionContainer} from './ExpressionContainer'\r\nimport {FieldStateContainer} from './FieldStateContainer'\r\nimport {FormStateContainer} from './FormStateContainer'\r\nimport {ValuesContainer} from './ValuesContainer'\r\n\r\nfunction useValidation() {\r\n    const config = useContainer(ConfigContainer).config\r\n    const valuesContainer = useContainer(ValuesContainer)\r\n    const fieldStateContainer = useContainer(FieldStateContainer)\r\n    const formStateContainer = useContainer(FormStateContainer)\r\n    const expressionContainer = useContainer(ExpressionContainer)\r\n\r\n    const [nextTick, setNextTick] = useState<number>(0)\r\n    useEffect(() => {\r\n        if (nextTick > Date.now()) {\r\n            setTimeout(() => setNextTick(0), nextTick - Date.now())\r\n        }\r\n    }, [nextTick])\r\n\r\n    const validate = (path: string, fieldDef: FormElementDef<{}>): string | null => {\r\n        if (!fieldDef.validation || fieldDef.validation.length <= 0) {\r\n            return null\r\n        }\r\n        return fieldDef.validation.reduce<string | null>((message, constraint): string | null => {\r\n            if (message != null) {\r\n                return message\r\n            }\r\n            return validateConstraint(constraint, path, fieldDef)\r\n        }, null)\r\n    }\r\n\r\n    function validateConstraint(constraint: ValidationConstraintDef | string, path: string, fieldDef: FormElementDef<{}>): string | null {\r\n        if (typeof constraint === 'string') {\r\n            const fieldValue = valuesContainer.getValue(path) || ''\r\n            const validationRule = validationRuleMap[constraint]\r\n            if (!validationRule.validate(fieldValue)) {\r\n                return validationRule.defaultMessage\r\n            }\r\n            return null\r\n        } else if (!isValidationExpresionDef(constraint)) {\r\n            const fieldValue = valuesContainer.getValue(path) || ''\r\n            const validationRule = validationRuleMap[constraint.name]\r\n            if (!validationRule.validate(fieldValue)) {\r\n                return constraint.message || validationRule.defaultMessage\r\n            }\r\n            return null\r\n        } else {\r\n            const expressionValidation = expressionContainer.expressionValidations[constraint.name]\r\n            if (!expressionValidation.validate(path, fieldDef, constraint.expression)) {\r\n                return constraint.message || expressionValidation.defaultMessage\r\n            }\r\n            return null\r\n        }\r\n    }\r\n\r\n    const validateAndShouldShow = (path: string, fieldDef: FormElementDef<{}>): string | null => {\r\n        return shouldShowErrors(path, fieldDef) ? validate(path, fieldDef) : null\r\n    }\r\n\r\n    const shouldShowErrors = (path: string, fieldDef: FormElementDef<{}>): boolean => {\r\n        if (formStateContainer.nextOrSubmit() || config.showErrors === 'immediately') {\r\n            return true\r\n        }\r\n        const fieldState = fieldStateContainer.get(path)\r\n        if (config.showErrors === 'afterFocus' && fieldState.focus) {\r\n            return timeHasPassedAndShouldShowError(fieldState.focus)\r\n        }\r\n        if (config.showErrors === 'afterValueChanged' && fieldState.valueChanged) {\r\n            return timeHasPassedAndShouldShowError(fieldState.valueChanged)\r\n        }\r\n        if (config.showErrors === 'afterBlur' && fieldState.blur) {\r\n            return timeHasPassedAndShouldShowError(fieldState.valueChanged)\r\n        }\r\n        return false\r\n    }\r\n\r\n    const timeHasPassedAndShouldShowError = (time: number) => {\r\n        if (!config.showErrorsDelay || config.showErrorsDelay === 0) {\r\n            return true\r\n        } else if ((time + config.showErrorsDelay) < Date.now()) {\r\n            return true\r\n        } else {\r\n            setNextTick(time + config.showErrorsDelay)\r\n            return false\r\n        }\r\n    }\r\n\r\n    const validateRecursively = (path: string, fieldDef?: FormElementDef<{}>): boolean => {\r\n        if (!fieldDef) {\r\n            return false\r\n        }\r\n        if (validate(path, fieldDef) != null) {\r\n            return true\r\n        }\r\n        if (fieldDef.children) {\r\n            return fieldDef.children.some((childFieldDef) => {\r\n                const childPath = createFiledPath(path, childFieldDef.fieldId)\r\n                if (isTypeACollection(childFieldDef.type)) {\r\n                    const size = valuesContainer.getCollectionSize(childPath)\r\n                    for (let index = 0; index < size; index++) {\r\n                        if (validateRecursively(childPath + '[' + index + ']', childFieldDef)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                    return false\r\n                } else {\r\n                    return validateRecursively(childPath, childFieldDef)\r\n                }\r\n            })\r\n        }\r\n        return false\r\n    }\r\n\r\n    return {validate, shouldShowErrors, validateAndShouldShow, validateRecursively}\r\n}\r\n\r\nexport const ValidationContainer = createContainer(useValidation)","import {Config} from './state/ConfigContainer'\r\n\r\nexport default interface FormDef {\r\n    elements: FormElementDef<{}>[]\r\n    config?: Config\r\n}\r\n\r\nexport interface FormElementDef<Attributes> {\r\n    type: string,\r\n    attributes: Attributes,\r\n    fieldId?: string,\r\n    children?: Array<FormElementDef<any>>\r\n    validation?: Array<string | ValidationConstraintDef>\r\n}\r\n\r\nexport type ValidationConstraintDef = ValidationRuleDef | ValidationExpresionDef\r\n\r\nexport function isValidationExpresionDef(constraint: ValidationConstraintDef): constraint is ValidationExpresionDef {\r\n    return (constraint as ValidationExpresionDef).expression !== undefined\r\n}\r\n\r\nexport interface ValidationRuleDef {\r\n    name: string,\r\n    arguments?: string[],\r\n    message?: string\r\n}\r\n\r\nexport interface ValidationExpresionDef {\r\n    name: string,\r\n    expression: string,\r\n    message?: string\r\n}\r\n\r\n","import React from 'react'\r\nimport {List} from './collection/List'\r\nimport {ButtonGroup} from './input/ButtonGroup'\r\nimport {Dropdown} from './input/Dropdown'\r\nimport {TextInput} from './input/TextInput'\r\nimport {Heading} from './output/Heading'\r\nimport {Paragraph} from './output/Paragraph'\r\nimport {Accordion} from './pagination/Accordion'\r\n\r\ninterface FormElementTypesMap {\r\n    [type: string]: React.ReactNode\r\n}\r\n\r\nexport const formElementNonCollectionTypes: FormElementTypesMap = {\r\n    'accordion': Accordion,\r\n    'dropdown': Dropdown,\r\n    'textInput': TextInput,\r\n    'heading': Heading,\r\n    'paragraph': Paragraph,\r\n    'buttonGroup': ButtonGroup,\r\n}\r\n\r\nexport const formElementCollectionTypes: FormElementTypesMap = {\r\n    'list': List\r\n}\r\n\r\nexport const formElementTypes: FormElementTypesMap = Object.assign(formElementNonCollectionTypes, formElementCollectionTypes)\r\n\r\nexport function lookupElement(type: string): React.ReactNode {\r\n    const foundType = formElementTypes[type]\r\n    if (!foundType) {\r\n        console.warn('Could not find form element type:' + type)\r\n        return () => <div>Could not find form element type {type}.</div>\r\n    }\r\n    return foundType\r\n}\r\n\r\nexport function isTypeACollection(type: string): boolean {\r\n    return formElementCollectionTypes.hasOwnProperty(type)\r\n}","import React from 'react'\n\ninterface LabelProps {\n    text: string,\n    htmlFor: string,\n    error: boolean\n}\n\nexport const Label = (props: LabelProps) => <label htmlFor={props.htmlFor} className={'mr-2 h5 ' + (props.error ? 'text-danger' : '')}>{props.text}</label>","import React from 'react'\nimport {useContainer} from 'unstated-next'\nimport {FormElementDef} from '../FormDef'\nimport {ValidationContainer} from '../state/ValidationContainer'\nimport {Description} from './Description'\nimport {Label} from './Label'\n\n\ninterface FieldChromeProps {\n    path: string\n    def: FormElementDef<any>\n}\n\nexport const FieldChrome: React.FC<FieldChromeProps> = (props) => {\n    const validationContainer = useContainer(ValidationContainer)\n    const error = validationContainer.validateAndShouldShow(props.path, props.def)\n\n    return (<div className=\"form-group py-2\">\n        {props.def.attributes.label && <Label htmlFor={props.path} text={props.def.attributes.label} error={!!error}/>}\n        {props.children}\n        {error && <div className=\"error-message text-danger pt-2\">{error}</div>}\n        {props.def.attributes.description && <Description path={props.path} text={props.def.attributes.description}/>}\n    </div>)\n}","import classNames from 'classnames'\r\nimport React, {useRef, useState} from 'react'\r\nimport {useContainer} from 'unstated-next'\r\nimport {FormElementDef} from '../../FormDef'\r\nimport {ConfigContainer} from '../../state/ConfigContainer'\r\nimport {FormStateContainer} from '../../state/FormStateContainer'\r\nimport {ValidationContainer} from '../../state/ValidationContainer'\r\nimport {ChildFormElements} from '../ChildFormElements'\r\nimport {FormElementProps} from '../FormElementProps'\r\n\r\nexport interface AccordionAttributes {\r\n}\r\n\r\nexport const Accordion = (props: FormElementProps<AccordionAttributes>) => {\r\n    const config = useContainer(ConfigContainer).config\r\n    const validationContainer = useContainer(ValidationContainer)\r\n    const formStateContainer = useContainer(FormStateContainer)\r\n\r\n    const currentPageRef = useRef<HTMLDivElement>(null)\r\n    const [currentPage, setCurrentPage] = useState<number>(0)\r\n\r\n    if (!props.definition.children) {\r\n        return null\r\n    }\r\n    const isFirst = currentPage === 0\r\n    const isLast = currentPage === (props.definition.children!.length - 1)\r\n    const currentPageHasErrors = validationContainer.validateRecursively(props.path, props.definition.children[currentPage])\r\n    const disableNext = config.disableNextWhenErrors && currentPageHasErrors\r\n\r\n    const goToPage = (newIndex: number) => {\r\n        setCurrentPage(newIndex)\r\n        if (currentPageRef && currentPageRef.current) {\r\n            window.scroll({top: currentPageRef.current.getBoundingClientRect().top - 100})\r\n        }\r\n    }\r\n\r\n    const previous = () => {\r\n        goToPage(currentPage - 1)\r\n        formStateContainer.clearNextClicked()\r\n\r\n    }\r\n\r\n    const next = () => {\r\n        if (currentPageHasErrors) {\r\n            formStateContainer.nextClicked()\r\n        } else {\r\n            formStateContainer.clearNextClicked()\r\n            goToPage(currentPage + 1)\r\n        }\r\n    }\r\n\r\n    const submit = () => {\r\n        if (currentPageHasErrors) {\r\n            formStateContainer.submitClicked()\r\n        } else {\r\n            console.log('Submit')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\r\n            {props.definition.children!.map((page, index) => (\r\n                <div className=\"card\" key={props.path + '_PAGE_' + index}>\r\n                    {currentPage === index && <div ref={currentPageRef}/>}\r\n                    <div className=\"card-header cursor-pointer\" onClick={() => goToPage(index)}>\r\n                        <h3 className=\"d-inline\">{page.attributes.label}</h3>{index < currentPage && <button className=\"link-button text-muted px-1\" onClick={() => goToPage(index)}><u>edit</u></button>}\r\n                    </div>\r\n                    {currentPage === index && <div className=\"card-body m-1\">\r\n                        {page.children && <ChildFormElements childFormElements={page.children as FormElementDef<any>[]} parentPath={props.parentPath}/>}\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <nav aria-label=\"Page navigation\">\r\n                                    <ul className=\"pagination mb-0\">\r\n                                        {!isFirst && <li className=\"page-item\">\r\n                                            <button className=\"page-link\" onClick={previous}>Previous</button>\r\n                                        </li>}\r\n                                        {!isLast && <li className={classNames('page-item', {disabled: disableNext})}>\r\n                                            <button className=\"page-link\" onClick={next} disabled={disableNext}>Next</button>\r\n                                        </li>}\r\n                                    </ul>\r\n                                </nav>\r\n                            </div>\r\n                            {isLast &&\r\n                            <div className=\"col\">\r\n                                <button className=\"btn btn-primary float-right\" onClick={submit}>Submit</button>\r\n                            </div>}\r\n                        </div>\r\n                    </div>}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}","import React from 'react'\nimport {useContainer} from 'unstated-next'\nimport {FieldChrome} from '../../display/FieldChrome'\nimport {FieldStateContainer} from '../../state/FieldStateContainer'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {FormElementProps} from '../FormElementProps'\n\nexport interface DropdownAttributes {\n    label: string\n    description: string\n    info?: string\n    options: string[]\n}\n\nexport const Dropdown = (props: FormElementProps<DropdownAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    const fieldStateContainer = useContainer(FieldStateContainer)\n    return <FieldChrome path={props.path} def={props.definition}>\n        <select\n            className=\"form-control custom-select\"\n            id={props.definition.fieldId}\n            value={formValuesContainer.getValue(props.path) || ''}\n            onChange={event => formValuesContainer.setValue(props.path, event.currentTarget.value)}\n            aria-describedby={props.definition.fieldId + '_description'}\n            onFocus={() => fieldStateContainer.focus(props.path)}\n            onBlur={() => fieldStateContainer.blur(props.path)}\n        >\n            <option value=\"\"/>\n            {props.definition.attributes.options.map((option) => <option value={option} key={option}>{option}</option>)}\n        </select>\n    </FieldChrome>\n}","import React from 'react'\nimport {useContainer} from 'unstated-next'\nimport {FieldChrome} from '../../display/FieldChrome'\nimport {FieldStateContainer} from '../../state/FieldStateContainer'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {FormElementProps} from '../FormElementProps'\n\ninterface TextInputAttributes {\n    label: string\n    description: string\n    info?: string\n}\n\nexport const TextInput = (props: FormElementProps<TextInputAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    const fieldStateContainer = useContainer(FieldStateContainer)\n\n    return (<FieldChrome path={props.path} def={props.definition}>\n        <input\n            type=\"text\"\n            className=\"form-control\"\n            id={props.definition.fieldId}\n            aria-describedby={props.path + '_description'}\n            value={formValuesContainer.getValue(props.path) || ''}\n            onChange={event => formValuesContainer.setValue(props.path, event.currentTarget.value)}\n            onFocus={() => fieldStateContainer.focus(props.path)}\n            onBlur={() => fieldStateContainer.blur(props.path)}\n        />\n    </FieldChrome>)\n}","import React from 'react'\nimport {FormElementProps} from '../FormElementProps'\n\ninterface HeadingAttributes {\n    level: number\n    text: string\n}\n\nexport const Heading = (props: FormElementProps<HeadingAttributes>) =>\n    React.createElement('h' + props.definition.attributes.level, null, props.definition.attributes.text)","import React from 'react'\nimport {FormElementProps} from '../FormElementProps'\n\n\ninterface ParagraphAttributes {\n    text: string\n}\n\nexport const Paragraph = (props: FormElementProps<ParagraphAttributes>) => <p>{props.definition.attributes.text}</p>","import React, {useState} from 'react'\nimport {useContainer} from 'unstated-next'\nimport {FieldChrome} from '../../display/FieldChrome'\nimport {FieldStateContainer} from '../../state/FieldStateContainer'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {FormElementProps} from '../FormElementProps'\n\ninterface ButtonGroupAttributes {\n    label: string\n    description?: string\n    info?: string\n    options: string[]\n}\n\nexport const ButtonGroup = (props: FormElementProps<ButtonGroupAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    const fieldStateContainer = useContainer(FieldStateContainer)\n    const value = formValuesContainer.getValue(props.path)\n    const [focus, setFocus] = useState<number | null>(null)\n\n    return (\n        <FieldChrome path={props.path} def={props.definition}>\n            <div className=\"btn-group-wrapper\"\n                 onFocus={() => fieldStateContainer.focus(props.path)}\n                 onBlur={() => fieldStateContainer.blur(props.path)}\n            >\n                <div className=\"btn-group btn-group-toggle\">\n                    {props.definition.attributes.options.map((option, index) => (\n                        <label\n                            className={'btn btn-outline-secondary' + (value === option ? ' active' : '') + (focus === index ? ' focus' : '')}\n                            key={props.path + '_OPTION_' + option}\n                            onFocus={() => setFocus(index)}\n                            onBlur={() => setFocus(null)}\n                        >\n                            <input\n                                type=\"radio\"\n                                value={option}\n                                checked={option === value}\n                                onChange={event => formValuesContainer.setValue(props.path, event.currentTarget.value)}\n                            />{option}\n                        </label>))\n                    }\n                </div>\n            </div>\n        </FieldChrome>)\n}","import {times} from 'lodash-es'\nimport React from 'react'\nimport {useContainer} from 'unstated-next'\nimport {Description} from '../../display/Description'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {ordinal} from '../../util'\nimport {ChildFormElements} from '../ChildFormElements'\nimport {FormElementProps} from '../FormElementProps'\n\n\nexport interface IterationAttributes {\n    label: string\n    itemLabel: string\n    description: string\n}\n\nexport const List = (props: FormElementProps<IterationAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    return (\n        <div className=\"form-group\">\n            <span className=\"h4 align-middle mr-2\">{props.definition.attributes.label}</span>\n            {props.definition.attributes.description && <Description path={props.path} text={props.definition.attributes.description}/>}\n            {times(formValuesContainer.getCollectionSize(props.path), (index: number) =>\n                <div className={'card border-bottom mb-3' + (index === 0 ? ' mt-2' : '')} key={props.path + '_COLLECTION_' + index}>\n                    <h5 className=\"card-header\">{ordinal(index + 1)} {props.definition.attributes.itemLabel}\n                        <button className=\"close text-dark\" onClick={() => formValuesContainer.deleteFromCollection(props.path, index)}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </h5>\n                    <div className=\"card-body pb-0\">\n                        {props.definition.children && <ChildFormElements childFormElements={props.definition.children} parentPath={props.path + '[' + index + ']'}/>}\n                    </div>\n                </div>\n            )}\n            <button className=\"btn btn-secondary d-inline\" onClick={() => formValuesContainer.addToCollection(props.path)}>Add</button>\n        </div>)\n}\n","import React from 'react'\r\nimport {FormElementDef} from '../FormDef'\r\nimport {createFiledPath} from '../util'\r\nimport {lookupElement} from './formElementTypes'\r\n\r\ninterface ChildFormElementsProps {\r\n    childFormElements: FormElementDef<any>[]\r\n    parentPath: string\r\n}\r\n\r\nexport const ChildFormElements = (props: ChildFormElementsProps) => {\r\n    return (\r\n        <div>\r\n            {props.childFormElements.map((elementDef, index) => {\r\n                const Child: any = lookupElement(elementDef.type)\r\n                return React.createElement(Child, {\r\n                    definition: elementDef,\r\n                    parentPath: props.parentPath,\r\n                    path: createFiledPath(props.parentPath, elementDef.fieldId),\r\n                    key: props.parentPath + '_' + index\r\n                })\r\n            })}\r\n        </div>)\r\n}","import React from 'react'\nimport FormDef from './FormDef'\nimport {ChildFormElements} from './formElements/ChildFormElements'\nimport {ConfigContainer} from './state/ConfigContainer'\nimport {ExpressionContainer} from './state/ExpressionContainer'\nimport {FieldStateContainer} from './state/FieldStateContainer'\nimport {FormStateContainer} from './state/FormStateContainer'\nimport {ValidationContainer} from './state/ValidationContainer'\nimport {ValuesContainer} from './state/ValuesContainer'\n\nexport interface FormProps {\n    formDef: FormDef\n}\n\nexport const Form = (props: FormProps) =>\n    (<div className=\"p-2 container\">\n        <ConfigContainer.Provider initialState={props.formDef.config}>\n            <FormStateContainer.Provider>\n                <FieldStateContainer.Provider>\n                    <ValuesContainer.Provider>\n                        <ExpressionContainer.Provider>\n                            <ValidationContainer.Provider>\n                                <ChildFormElements childFormElements={props.formDef.elements} parentPath=\"\"/>\n                            </ValidationContainer.Provider>\n                        </ExpressionContainer.Provider>\n                    </ValuesContainer.Provider>\n                </FieldStateContainer.Provider>\n            </FormStateContainer.Provider>\n        </ConfigContainer.Provider>\n    </div>)","import axios from 'axios'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Form} from './Form'\nimport FormDef from './FormDef'\nimport './index.css'\n\naxios.get<FormDef>('exampleFormDefinition.json')\n    .then(function (response) {\n        ReactDOM.render(\n            <Form formDef={response.data}/>,\n            document.getElementById('form')\n        )\n    })\n    .catch(function (error) {\n        console.error(error)\n        throw new Error(error)\n    })"],"sourceRoot":""}