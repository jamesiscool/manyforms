{"version":3,"sources":["util.ts","display/Description.tsx","state/ValuesContainer.ts","validation/ValidationRules.ts","state/ValidationContainer.ts","formElements/formElementTypes.tsx","display/Label.tsx","display/FieldChrome.tsx","formElements/pagination/Accordion.tsx","formElements/input/Dropdown.tsx","formElements/input/TextInput.tsx","formElements/output/Heading.tsx","formElements/output/Paragraph.tsx","formElements/input/ButtonGroup.tsx","formElements/collection/List.tsx","formElements/ChildFormElements.tsx","Form.tsx","index.tsx"],"names":["createFiledPath","parentFieldPath","fieldId","Description","props","react_default","a","createElement","id","fieldPath","className","text","ValuesContainer","createContainer","initialState","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","formValues","setFormValues","setValue","path","value","nextFormValues","produce","draftFormValues","set","getValue","get","addToCollection","oldCollection","newCollection","concat","toConsumableArray","deleteFromCollection","index","slice","getCollectionSize","collection","ruleValidatorMap","email","validate","isEmail","defaultMessage","alpha","isAlpha","numeric","isNumeric","alphanumeric","isAlphanumeric","currency","isCurrency","ValidationContainer","valuesContainer","useContainer","fieldDef","validation","foundValue","required","rules","firstRuleThatFails","find","validationRuleDef","name","message","hasErrorsRecursively","children","some","childFieldDef","type","childPath","formElementCollectionTypes","hasOwnProperty","size","Label","htmlFor","error","FieldChrome","def","attributes","label","Label_Label","description","Description_Description","formElementNonCollectionTypes","accordion","currentPageRef","useRef","currentPage","setCurrentPage","validationContainer","definition","isFirst","isLast","currentPageHasErrors","goToPage","newIndex","current","window","scroll","top","getBoundingClientRect","role","aria-multiselectable","map","page","key","ref","onClick","ChildFormElements_ChildFormElements","childFormElements","aria-label","classNames","disabled","console","log","dropdown","formValuesContainer","FieldChrome_FieldChrome","onChange","event","currentTarget","aria-describedby","options","option","textInput","heading","React","level","paragraph","buttonGroup","focus","setFocus","onFocus","onBlur","checked","list","times","n","s","v","ordinal","itemLabel","aria-hidden","formElementTypes","assign","ChildFormElements","elementDef","Child","foundType","warn","lookupElement","Form","Provider","formDef","elements","fetch","then","response","ok","Error","statusText","json","ReactDOM","render","Form_Form","document","getElementById"],"mappings":"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","file":"static/js/main.1cf4f591.chunk.js","sourcesContent":["//export const createKey = () => (Math.random() + 1).toString(36).substring(2)\n\nexport const ordinal = (n: number): string => {\n    const s = ['th', 'st', 'nd', 'rd'],\n        v = n % 100\n    return n + (s[(v - 20) % 10] || s[v] || s[0])\n}\n\nexport const createFiledPath = (parentFieldPath: string, fieldId?: string): string => {\n    if (!fieldId) {\n        return parentFieldPath\n    }\n    if (parentFieldPath !== '') {\n        return parentFieldPath + '.' + fieldId\n    }\n    return fieldId\n\n}","import React from \"react\"\n\ninterface DescriptionProps {\n    fieldPath: string,\n    text: string\n}\n\nexport const Description = (props: DescriptionProps) => (\n    <div id={props.fieldPath + '_description'} className=\"pt-2 text-muted description\">{props.text}</div>\n)","import produce from \"immer\"\r\nimport get from 'lodash/get'\r\nimport set from 'lodash/set'\r\nimport {useState} from \"react\"\r\nimport {createContainer} from \"unstated-next\"\r\n\r\nexport function useFormValues(initialState = {}) {\r\n    const [formValues, setFormValues] = useState(initialState)\r\n    const setValue = (path: string, value: any) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            set(draftFormValues, path, value)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n\r\n    function getValue(path: string): string {\r\n        return get(formValues, path)\r\n    }\r\n\r\n    const addToCollection = (path: string) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            const oldCollection = get(draftFormValues, path, [])\r\n            const newCollection = [...oldCollection, {}]\r\n            set(draftFormValues, path, newCollection)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const deleteFromCollection = (path: string, index: number) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            const oldCollection = get(draftFormValues, path)\r\n            const newCollection = [...oldCollection.slice(0, index), ...oldCollection.slice(index + 1)]\r\n            set(draftFormValues, path, newCollection)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const getCollectionSize = (path: string) => {\r\n        const collection = get(formValues, path)\r\n        return collection ? collection.length : 0\r\n    }\r\n    return {formValues, setValue, getValue, addToCollection, deleteFromCollection, getCollectionSize}\r\n}\r\n\r\nexport const ValuesContainer = createContainer(useFormValues)","import isAlpha from \"validator/lib/isAlpha\"\r\nimport isAlphanumeric from \"validator/lib/isAlphanumeric\"\r\nimport isCurrency from \"validator/lib/isCurrency\"\r\nimport isEmail from \"validator/lib/isEmail\"\r\nimport isNumeric from \"validator/lib/isNumeric\"\r\n\r\nexport interface ValidationRuleDef {\r\n    name: string,\r\n    arguments?: string[],\r\n    options?: {}\r\n    message?: string\r\n}\r\n\r\ninterface RuleValidator {\r\n    validate: (value: string) => boolean,\r\n    defaultMessage: string\r\n}\r\n\r\nexport const ruleValidatorMap: { [name: string]: RuleValidator } = {\r\n    email: {\r\n        validate: (value: string) => {\r\n            return isEmail(value)\r\n        },\r\n        defaultMessage: 'Please enter a email address'\r\n    },\r\n    alpha: {\r\n        validate: (value: string) => {\r\n            return isAlpha(value)\r\n        },\r\n        defaultMessage: 'Please enter only letters'\r\n    },\r\n    numeric: {\r\n        validate: (value: string) => {\r\n            return isNumeric(value)\r\n        },\r\n        defaultMessage: 'Please enter only numbers'\r\n    },\r\n    alphanumeric: {\r\n        validate: (value: string) => {\r\n            return isAlphanumeric(value)\r\n        },\r\n        defaultMessage: 'Please enter only letters and numbers'\r\n    },\r\n    currency: {\r\n        validate: (value: string) => {\r\n            return isCurrency(value)\r\n        },\r\n        defaultMessage: 'Please enter a currency amount'\r\n    }\r\n}","import {createContainer, useContainer} from \"unstated-next\"\r\nimport {FormElementDef} from \"../formElements/FormElementDef\"\r\nimport {isTypeACollection} from \"../formElements/formElementTypes\"\r\nimport {createFiledPath} from \"../util\"\r\nimport {ruleValidatorMap, ValidationRuleDef} from \"../validation/ValidationRules\"\r\nimport {ValuesContainer} from \"./ValuesContainer\"\r\n\r\nfunction useValidation() {\r\n    const valuesContainer = useContainer(ValuesContainer)\r\n\r\n    function validate(path: string, fieldDef: FormElementDef<{}>): string | undefined {\r\n        if (!fieldDef.validation) {\r\n            return undefined\r\n        }\r\n        const foundValue = valuesContainer.getValue(path)\r\n        if (fieldDef.validation.required && (!foundValue || foundValue.length <= 0)) {\r\n            return 'This field is required'\r\n        }\r\n        if (fieldDef.validation.rules) {\r\n            const firstRuleThatFails = fieldDef.validation.rules.find((validationRuleDef: ValidationRuleDef) => {\r\n                return !ruleValidatorMap[validationRuleDef.name].validate(foundValue)\r\n            })\r\n            if (firstRuleThatFails) {\r\n                return firstRuleThatFails.message || ruleValidatorMap[firstRuleThatFails.name].defaultMessage\r\n            }\r\n        }\r\n        return undefined\r\n    }\r\n\r\n    function hasErrorsRecursively(path: string, fieldDef?: FormElementDef<{}>): boolean {\r\n        if (!fieldDef) {\r\n            return false\r\n        }\r\n        if (validate(path, fieldDef)) {\r\n            return true\r\n        }\r\n        if (fieldDef.children) {\r\n            return fieldDef.children.some((childFieldDef) => {\r\n                const childPath = createFiledPath(path, childFieldDef.fieldId)\r\n                if (isTypeACollection(childFieldDef.type)) {\r\n                    const size = valuesContainer.getCollectionSize(childPath)\r\n                    for (let index = 0; index < size; index++) {\r\n                        if (hasErrorsRecursively(childPath + '[' + index + ']', childFieldDef)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                    return false\r\n                } else {\r\n                    return hasErrorsRecursively(childPath, childFieldDef)\r\n                }\r\n            })\r\n        }\r\n        return false\r\n    }\r\n\r\n    return {validate, hasErrorsRecursively}\r\n}\r\n\r\nexport const ValidationContainer = createContainer(useValidation)","import React from \"react\"\r\nimport {List} from \"./collection/List\"\r\nimport {ButtonGroup} from \"./input/ButtonGroup\"\r\nimport {Dropdown} from \"./input/Dropdown\"\r\nimport {TextInput} from \"./input/TextInput\"\r\nimport {Heading} from \"./output/Heading\"\r\nimport {Paragraph} from \"./output/Paragraph\"\r\nimport {Accordion} from \"./pagination/Accordion\"\r\n\r\ninterface FormElementTypesMap {\r\n    [type: string]: React.ReactNode\r\n}\r\n\r\nexport const formElementNonCollectionTypes: FormElementTypesMap = {\r\n    'accordion': Accordion,\r\n    'dropdown': Dropdown,\r\n    'textInput': TextInput,\r\n    'heading': Heading,\r\n    'paragraph': Paragraph,\r\n    'buttonGroup': ButtonGroup,\r\n}\r\n\r\nexport const formElementCollectionTypes: FormElementTypesMap = {\r\n    'list': List\r\n}\r\n\r\nexport const formElementTypes: FormElementTypesMap = Object.assign(formElementNonCollectionTypes, formElementCollectionTypes)\r\n\r\nexport function lookupElement(type: string): React.ReactNode {\r\n    const foundType = formElementTypes[type]\r\n    if (!foundType) {\r\n        console.warn('Could not find form element type:' + type)\r\n        return () => <div>Could not find form element type {type}.</div>\r\n    }\r\n    return foundType\r\n}\r\n\r\nexport function isTypeACollection(type: string): boolean {\r\n    return formElementCollectionTypes.hasOwnProperty(type)\r\n}","import React from \"react\"\n\ninterface LabelProps {\n    text: string,\n    htmlFor: string,\n    error: boolean\n}\n\nexport const Label = (props: LabelProps) => <label htmlFor={props.htmlFor} className={'mr-2 h5 ' + (props.error ? 'text-danger' : '')}>{props.text}</label>","import React from \"react\"\nimport {useContainer} from \"unstated-next\"\nimport {FormElementDef} from \"../formElements/FormElementDef\"\nimport {ValidationContainer} from \"../state/ValidationContainer\"\nimport {Description} from \"./Description\"\nimport {Label} from \"./Label\"\n\n\ninterface FieldChromeProps {\n    fieldPath: string\n    def: FormElementDef<any>\n    //children: React.ReactNode\n}\n\nexport const FieldChrome: React.FC<FieldChromeProps> = (props) => {\n    const validationContainer = useContainer(ValidationContainer)\n    const error = validationContainer.validate(props.fieldPath, props.def)\n\n    return (<div className=\"form-group py-2\">\n        {props.def.attributes.label && <Label htmlFor={props.fieldPath} text={props.def.attributes.label} error={!!error}/>}\n        {props.children}\n        {error && <div className=\"error-message text-danger pt-2\">{error}</div>}\n        {props.def.attributes.description && <Description fieldPath={props.fieldPath} text={props.def.attributes.description}/>}\n    </div>)\n}","import classNames from 'classnames'\nimport React, {useRef, useState} from \"react\"\nimport {useContainer} from \"unstated-next\"\nimport {ValidationContainer} from \"../../state/ValidationContainer\"\nimport {ChildFormElements} from \"../ChildFormElements\"\nimport {FormElementDef} from \"../FormElementDef\"\nimport {FormElementProps} from \"../FormElementProps\"\n\nexport interface AccordionAttributes {\n}\n\nexport const Accordion = (props: FormElementProps<AccordionAttributes>) => {\n    const currentPageRef = useRef<HTMLDivElement>(null)\n    const [currentPage, setCurrentPage] = useState<number>(2)\n    const validationContainer = useContainer(ValidationContainer)\n\n    if (!props.definition.children) {\n        return null\n    }\n\n    const isFirst = currentPage === 0\n    const isLast = currentPage === (props.definition.children!.length - 1)\n\n    const currentPageHasErrors = validationContainer.hasErrorsRecursively(props.fieldPath, props.definition.children[currentPage])\n\n    const goToPage = (newIndex: number) => {\n        setCurrentPage(newIndex)\n        if (currentPageRef && currentPageRef.current) {\n            window.scroll({top: currentPageRef.current.getBoundingClientRect().top - 100})\n        }\n    }\n\n    return (\n        <div className=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n            {props.definition.children!.map((page, index) => (\n                <div className=\"card\" key={props.fieldPath + '_PAGE_' + index}>\n                    {currentPage === index && <div ref={currentPageRef}/>}\n                    <div className=\"card-header cursor-pointer\" onClick={() => goToPage(index)}>\n                        <h3 className=\"d-inline\">{page.attributes.label}</h3>{index < currentPage && <button className=\"link-button text-muted px-1\" onClick={() => goToPage(index)}><u>edit</u></button>}\n                    </div>\n                    {currentPage === index && <div className=\"card-body m-1\">\n                        {page.children && <ChildFormElements childFormElements={page.children as FormElementDef<any>[]} parentFieldPath={props.parentFieldPath}/>}\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <nav aria-label=\"Page navigation\">\n                                    <ul className=\"pagination mb-0\">\n                                        {!isFirst && <li className=\"page-item\">\n                                            <button className=\"page-link\" onClick={() => goToPage(currentPage - 1)}>Previous</button>\n                                        </li>}\n                                        {!isLast && <li className={classNames(\"page-item\", {disabled: currentPageHasErrors})}>\n                                            <button className=\"page-link\" onClick={() => goToPage(currentPage + 1)} disabled={currentPageHasErrors}>Next</button>\n                                        </li>}\n                                    </ul>\n                                </nav>\n                            </div>\n                            {isLast &&\n                            <div className=\"col\">\n                                <button className=\"btn btn-primary float-right\" onClick={() => console.log('Submit')}>Submit</button>\n                            </div>}\n                        </div>\n                    </div>}\n                </div>\n            ))}\n        </div>\n    )\n}","import React from \"react\"\nimport {useContainer} from \"unstated-next\"\nimport {FieldChrome} from \"../../display/FieldChrome\"\nimport {ValuesContainer} from \"../../state/ValuesContainer\"\nimport {FormElementProps} from \"../FormElementProps\"\n\nexport interface DropdownAttributes {\n    label: string\n    description: string\n    info?: string\n    options: string[]\n}\n\nexport const Dropdown = (props: FormElementProps<DropdownAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    return <FieldChrome fieldPath={props.fieldPath} def={props.definition}>\n        <select\n            className=\"form-control custom-select\"\n            id={props.definition.fieldId}\n            value={formValuesContainer.getValue(props.fieldPath) || ''}\n            onChange={event => formValuesContainer.setValue(props.fieldPath, event.currentTarget.value)}\n            aria-describedby={props.definition.fieldId + '_description'}\n            //onBlur={() => props.setState({path: props.fieldPath, name: 'touched', value: true})}\n        >\n            <option value=\"\" disabled={props.definition.validation && props.definition.validation.required}/>\n            {props.definition.attributes.options.map((option) => <option value={option} key={option}>{option}</option>)}\n        </select>\n    </FieldChrome>\n}","import React from \"react\"\nimport {useContainer} from \"unstated-next\"\nimport {FieldChrome} from \"../../display/FieldChrome\"\nimport {ValuesContainer} from \"../../state/ValuesContainer\"\nimport {FormElementProps} from \"../FormElementProps\"\n\ninterface TextInputAttributes {\n    label: string\n    description: string\n    info?: string\n}\n\nexport const TextInput = (props: FormElementProps<TextInputAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    return (<FieldChrome fieldPath={props.fieldPath} def={props.definition}>\n        <input\n            type=\"text\"\n            className=\"form-control\"\n            id={props.definition.fieldId}\n            aria-describedby={props.fieldPath + '_description'}\n            value={formValuesContainer.getValue(props.fieldPath) || ''}\n            onChange={event => formValuesContainer.setValue(props.fieldPath, event.currentTarget.value)}\n            //onBlur={() => props.setState({path: props.fieldPath, name: 'touched', value: true})}\n        />\n    </FieldChrome>)\n}","import React from \"react\"\nimport {FormElementProps} from \"../FormElementProps\"\n\ninterface HeadingAttributes {\n    level: number\n    text: string\n}\n\nexport const Heading = (props: FormElementProps<HeadingAttributes>) =>\n    React.createElement('h' + props.definition.attributes.level, null, props.definition.attributes.text)","import React from \"react\"\nimport {FormElementProps} from \"../FormElementProps\"\n\n\ninterface ParagraphAttributes {\n    text: string\n}\n\nexport const Paragraph = (props: FormElementProps<ParagraphAttributes>) => <p>{props.definition.attributes.text}</p>","import React, {useState} from \"react\"\nimport {useContainer} from \"unstated-next\"\nimport {FieldChrome} from \"../../display/FieldChrome\"\nimport {ValuesContainer} from \"../../state/ValuesContainer\"\nimport {FormElementProps} from \"../FormElementProps\"\n\ninterface ButtonGroupAttributes {\n    label: string\n    description?: string\n    info?: string\n    options: string[]\n}\n\nexport const ButtonGroup = (props: FormElementProps<ButtonGroupAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    const value = formValuesContainer.getValue(props.fieldPath)\n    const [focus, setFocus] = useState<number | null>(null)\n    return (\n        <FieldChrome fieldPath={props.fieldPath} def={props.definition}>\n            <div className=\"btn-group-wrapper\">\n                <div className=\"btn-group btn-group-toggle\">\n                    {props.definition.attributes.options.map((option, index) => (\n                        <label\n                            className={'btn btn-outline-secondary' + (value === option ? ' active' : '') + (focus === index ? ' focus' : '')}\n                            key={props.fieldPath + '_OPTION_' + option}\n                            onFocus={() => setFocus(index)}\n                            onBlur={() => setFocus(null)}\n                        >\n                            <input\n                                type=\"radio\"\n                                value={option}\n                                checked={option === value}\n                                onChange={event => formValuesContainer.setValue(props.fieldPath, event.currentTarget.value)}\n                            />{option}\n                        </label>))\n                    }\n                </div>\n            </div>\n        </FieldChrome>)\n}","import {times} from \"lodash\"\nimport React from \"react\"\nimport {useContainer} from \"unstated-next\"\nimport {Description} from \"../../display/Description\"\nimport {ValuesContainer} from \"../../state/ValuesContainer\"\nimport {ordinal} from \"../../util\"\nimport {ChildFormElements} from \"../ChildFormElements\"\nimport {FormElementProps} from \"../FormElementProps\"\n\n\nexport interface IterationAttributes {\n    label: string\n    itemLabel: string\n    description: string\n}\n\nexport const List = (props: FormElementProps<IterationAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    return (\n        <div className=\"form-group\">\n            <span className=\"h4 align-middle mr-2\">{props.definition.attributes.label}</span>\n            {props.definition.attributes.description && <Description fieldPath={props.fieldPath} text={props.definition.attributes.description}/>}\n            {times(formValuesContainer.getCollectionSize(props.fieldPath), (index: number) =>\n                <div className={'card border-bottom mb-3' + (index === 0 ? ' mt-2' : '')} key={props.fieldPath + '_COLLECTION_' + index}>\n                    <h5 className=\"card-header\">{ordinal(index + 1)} {props.definition.attributes.itemLabel}\n                        <button className=\"close text-dark\" onClick={() => formValuesContainer.deleteFromCollection(props.fieldPath, index)}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </h5>\n                    <div className=\"card-body pb-0\">\n                        {props.definition.children && <ChildFormElements childFormElements={props.definition.children} parentFieldPath={props.fieldPath + '[' + index + ']'}/>}\n                    </div>\n                </div>\n            )}\n            <button className=\"btn btn-secondary d-inline\" onClick={() => formValuesContainer.addToCollection(props.fieldPath)}>Add</button>\n        </div>)\n}\n","import React from \"react\"\r\nimport {createFiledPath} from \"../util\"\r\nimport {FormElementDef} from \"./FormElementDef\"\r\nimport {lookupElement} from \"./formElementTypes\"\r\n\r\ninterface ChildFormElementsProps {\r\n    childFormElements: FormElementDef<any>[]\r\n    parentFieldPath: string\r\n}\r\n\r\nexport const ChildFormElements = (props: ChildFormElementsProps) => {\r\n    //console.log('ChildFormElements', props)\r\n    return (\r\n        <div>\r\n            {props.childFormElements.map((elementDef, index) => {\r\n                const Child: any = lookupElement(elementDef.type)\r\n                return React.createElement(Child, {\r\n                    definition: elementDef,\r\n                    parentFieldPath: props.parentFieldPath,\r\n                    fieldPath: createFiledPath(props.parentFieldPath, elementDef.fieldId),\r\n                    key: props.parentFieldPath + '_' + index\r\n                })\r\n            })}\r\n        </div>)\r\n}","import React from \"react\"\nimport FormDef from \"./FormDef\"\nimport {ChildFormElements} from \"./formElements/ChildFormElements\"\nimport {ValidationContainer} from \"./state/ValidationContainer\"\nimport {ValuesContainer} from \"./state/ValuesContainer\"\n\nexport interface FormProps {\n    formDef: FormDef\n}\n\nexport const Form = (props: FormProps) =>\n    (<div className=\"p-2 container\">\n        <ValuesContainer.Provider>\n            <ValidationContainer.Provider>\n                <ChildFormElements childFormElements={props.formDef.elements} parentFieldPath=\"\"/>\n            </ValidationContainer.Provider>\n        </ValuesContainer.Provider>\n    </div>)","import React from \"react\"\nimport ReactDOM from 'react-dom'\nimport {Form} from \"./Form\"\nimport FormDef from \"./FormDef\"\nimport './index.css'\n\nfetch('exampleFormDefinition.json')\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(response.statusText)\n        }\n        return response.json()\n    })\n    .then((formDef: FormDef) => {\n        ReactDOM.render(\n            <Form formDef={formDef}/>,\n            document.getElementById('form')\n        )\n    })"],"sourceRoot":""}