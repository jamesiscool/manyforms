{"version":3,"sources":["display/Description.tsx","state/FormValues.ts","display/Label.tsx","display/FieldChrome.tsx","formElements/formElementTypes.tsx","formElements/pagination/Accordion.tsx","formElements/input/Dropdown.tsx","formElements/input/TextInput.tsx","formElements/output/Heading.tsx","formElements/output/Paragraph.tsx","formElements/input/ButtonGroup.tsx","formElements/collection/List.tsx","util.ts","formElements/ChildFormElements.tsx","Form.tsx","index.tsx"],"names":["Description","props","react_default","a","createElement","id","fieldPath","className","text","FormValues","createContainer","initialState","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","formValues","setFormValues","setValue","path","value","nextFormValues","produce","draftFormValues","set","getValue","get","addToCollection","oldCollection","newCollection","concat","toConsumableArray","console","log","deleteFromCollection","index","slice","getCollectionSize","collection","Label","htmlFor","error","FieldChrome","label","Label_Label","children","description","Description_Description","formElementTypes","accordion","currentPageRef","useRef","currentPage","setCurrentPage","isFirst","isLast","definition","goToPage","newIndex","current","window","scroll","top","getBoundingClientRect","role","aria-multiselectable","map","page","key","ref","onClick","attributes","ChildFormElements_ChildFormElements","childFormElements","parentFieldPath","aria-label","dropdown","formValuesContainer","useContainer","FieldChrome_FieldChrome","info","fieldId","onChange","event","currentTarget","aria-describedby","disabled","validation","required","options","option","textInput","type","heading","React","level","paragraph","buttonGroup","checked","list","times","n","s","v","ordinal","itemLabel","aria-hidden","ChildFormElements","elementDef","Child","warn","Form","Provider","formDef","elements","fetch","then","response","ok","Error","statusText","json","ReactDOM","render","Form_Form","document","getElementById"],"mappings":"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","file":"static/js/main.d410eb4d.chunk.js","sourcesContent":["import React from \"react\"\n\ninterface DescriptionProps {\n    fieldPath: string,\n    text: string\n}\n\nexport const Description = (props: DescriptionProps) => (\n    <div id={props.fieldPath + '_description'} className=\"pt-2 text-muted description\">{props.text}</div>\n)","import produce from \"immer\"\r\nimport {get, set} from \"lodash-es\"\r\nimport {useState} from \"react\"\r\nimport {createContainer} from \"unstated-next\"\r\n\r\nexport function useFormValues(initialState = {}) {\r\n    const [formValues, setFormValues] = useState(initialState)\r\n    const setValue = (path: string, value: any) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            set(draftFormValues, path, value)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const getValue = (path: string): string => {\r\n        return get(formValues, path)\r\n    }\r\n    const addToCollection = (path: string) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            const oldCollection = get(draftFormValues, path, [])\r\n            const newCollection = [...oldCollection, {}]\r\n            console.log('newCollection:', newCollection)\r\n            set(draftFormValues, path, newCollection)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const deleteFromCollection = (path: string, index: number) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            const oldCollection = get(draftFormValues, path)\r\n            const newCollection = [...oldCollection.slice(0, index), ...oldCollection.slice(index + 1)]\r\n            set(draftFormValues, path, newCollection)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const getCollectionSize = (path: string) => {\r\n        const collection = get(formValues, path)\r\n        return collection ? collection.length : 0\r\n    }\r\n    return {formValues, setValue, getValue, addToCollection, deleteFromCollection, getCollectionSize}\r\n}\r\n\r\nexport const FormValues = createContainer(useFormValues)","import React from \"react\"\n\ninterface LabelProps {\n    text: string,\n    htmlFor: string,\n    error: boolean\n}\n\nexport const Label = (props: LabelProps) => <label htmlFor={props.htmlFor} className={'mr-2 h5 ' + (props.error ? 'text-danger' : '')}>{props.text}</label>","import React from \"react\"\nimport {Description} from \"./Description\"\nimport {Label} from \"./Label\"\n\n\ninterface FieldChromeProps {\n    fieldPath: string\n    label: string\n    description?: string\n    info?: string\n    error?: string\n    children: React.ReactNode\n}\n\nexport const FieldChrome = (props: FieldChromeProps) => (\n    <div className=\"form-group py-2\">\n        {props.label && <Label htmlFor={props.fieldPath} text={props.label} error={!!props.error}/>}\n        {props.children}\n        {props.description && <Description fieldPath={props.fieldPath} text={props.description}/>}\n        {props.error && <div className=\"text-danger pt-2\">{props.error}</div>}\n    </div>)","import React from \"react\"\r\nimport {List} from \"./collection/List\"\r\nimport {ButtonGroup} from \"./input/ButtonGroup\"\r\nimport {Dropdown} from \"./input/Dropdown\"\r\nimport {TextInput} from \"./input/TextInput\"\r\nimport {Heading} from \"./output/Heading\"\r\nimport {Paragraph} from \"./output/Paragraph\"\r\nimport {Accordion} from \"./pagination/Accordion\"\r\n\r\nexport const formElementTypes: { [type: string]: any } = {\r\n    'accordion': Accordion,\r\n    'dropdown': Dropdown,\r\n    'textInput': TextInput,\r\n    'heading': Heading,\r\n    'paragraph': Paragraph,\r\n    'buttonGroup': ButtonGroup,\r\n    'list': List\r\n}\r\n\r\nexport const lookupElement = (type: string): any => {\r\n    if (!formElementTypes[type]) {\r\n        console.warn('Could not find form element type:' + type)\r\n        return () => <div>Could not find form element type {type}.</div>\r\n    }\r\n    return formElementTypes[type]\r\n}","import React, {useRef, useState} from \"react\"\nimport {ChildFormElements} from \"../ChildFormElements\"\nimport {FormElementDef} from \"../FormElementDef\"\nimport {FormElementProps} from \"../FormElementProps\"\n\nexport interface AccordionAttributes {\n}\n\nexport const Accordion = (props: FormElementProps<AccordionAttributes>) => {\n    const currentPageRef = useRef<HTMLDivElement>(null)\n    const [currentPage, setCurrentPage] = useState<number>(0)\n    const isFirst = currentPage === 0\n    const isLast = currentPage === (props.definition.children!.length - 1)\n\n    const goToPage = (newIndex: number) => {\n        console.log('goToPage:', newIndex)\n        setCurrentPage(newIndex)\n        if (currentPageRef && currentPageRef.current) {\n            window.scroll({top: currentPageRef.current.getBoundingClientRect().top - 100})\n        }\n    }\n\n    return (\n        <div className=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n            {props.definition.children!.map((page, index) => (\n                <div className=\"card\" key={props.fieldPath + '_PAGE_' + index}>\n                    {currentPage === index && <div ref={currentPageRef}/>}\n                    <div className=\"card-header cursor-pointer\" onClick={() => goToPage(index)}>\n                        <h3 className=\"d-inline\">{page.attributes.label}</h3>{index < currentPage && <button className=\"link-button text-muted px-1\" onClick={() => goToPage(index)}><u>edit</u></button>}\n                    </div>\n                    {currentPage === index && <div className=\"card-body m-1\">\n                        {page.children && <ChildFormElements childFormElements={page.children as FormElementDef<any>[]} parentFieldPath={props.parentFieldPath}/>}\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <nav aria-label=\"Page navigation example\">\n                                    <ul className=\"pagination mb-0\">\n                                        {!isFirst && <li className=\"page-item\">\n                                            <button className=\"page-link text-primary\" onClick={() => goToPage(currentPage - 1)}>Previous</button>\n                                        </li>}\n                                        {!isLast && <li className=\"page-item\">\n                                            <button className=\"page-link text-primary\" onClick={() => goToPage(currentPage + 1)}>Next</button>\n                                        </li>}\n                                    </ul>\n                                </nav>\n                            </div>\n                            {isLast &&\n                            <div className=\"col\">\n                                <button className=\"btn btn-primary float-right\" onClick={() => console.log('Submit')}>Submit</button>\n                            </div>}\n                        </div>\n                    </div>}\n                </div>\n            ))}\n        </div>\n    )\n}","import React from \"react\"\nimport {FieldChrome} from \"../../display/FieldChrome\"\nimport {FormValues} from \"../../state/FormValues\"\nimport {FormElementProps} from \"../FormElementProps\"\n\nexport interface DropdownAttributes {\n    label: string\n    description: string\n    info?: string\n    options: string[]\n}\n\nexport const Dropdown = (props: FormElementProps<DropdownAttributes>) => {\n    const formValuesContainer = FormValues.useContainer()\n    return <FieldChrome fieldPath={props.fieldPath} label={props.definition.attributes.label} info={props.definition.attributes.info} description={props.definition.attributes.description}>\n        <select\n            className=\"form-control custom-select\"\n            id={props.definition.fieldId}\n            value={formValuesContainer.getValue(props.fieldPath) || ''}\n            onChange={event => formValuesContainer.setValue(props.fieldPath, event.currentTarget.value)}\n            aria-describedby={props.definition.fieldId + '_description'}\n            //onBlur={() => props.setState({path: props.fieldPath, name: 'touched', value: true})}\n        >\n            <option value=\"\" disabled={props.definition.validation && props.definition.validation.required}/>\n            {props.definition.attributes.options.map((option) => <option value={option} key={option}>{option}</option>)}\n        </select>\n    </FieldChrome>\n}","import React from \"react\"\nimport {FieldChrome} from \"../../display/FieldChrome\"\nimport {FormValues} from \"../../state/FormValues\"\nimport {FormElementProps} from \"../FormElementProps\"\n\ninterface TextInputAttributes {\n    label: string\n    description: string\n    info?: string\n}\n\nexport const TextInput = (props: FormElementProps<TextInputAttributes>) => {\n    const formValuesContainer = FormValues.useContainer()\n    return (\n        <FieldChrome fieldPath={props.fieldPath} label={props.definition.attributes.label} description={props.definition.attributes.description} info={props.definition.attributes.info}>\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                id={props.definition.fieldId}\n                aria-describedby={props.fieldPath + '_description'}\n                value={formValuesContainer.getValue(props.fieldPath) || ''}\n                onChange={event => formValuesContainer.setValue(props.fieldPath, event.currentTarget.value)}\n                //onBlur={() => props.setState({path: props.fieldPath, name: 'touched', value: true})}\n            />\n        </FieldChrome>)\n}","import React from \"react\"\nimport {FormElementProps} from \"../FormElementProps\"\n\ninterface HeadingAttributes {\n    level: number\n    text: string\n}\n\nexport const Heading = (props: FormElementProps<HeadingAttributes>) =>\n    React.createElement('h' + props.definition.attributes.level, null, props.definition.attributes.text)","import React from \"react\"\nimport {FormElementProps} from \"../FormElementProps\"\n\n\ninterface ParagraphAttributes {\n    text: string\n}\n\nexport const Paragraph = (props: FormElementProps<ParagraphAttributes>) => <p>{props.definition.attributes.text}</p>","import React from \"react\"\nimport {FieldChrome} from \"../../display/FieldChrome\"\nimport {FormValues} from \"../../state/FormValues\"\nimport {FormElementProps} from \"../FormElementProps\"\n\ninterface ButtonGroupAttributes {\n    label: string\n    description?: string\n    info?: string\n    options: string[]\n}\n\nexport const ButtonGroup = (props: FormElementProps<ButtonGroupAttributes>) => {\n    const formValuesContainer = FormValues.useContainer()\n    const value = formValuesContainer.getValue(props.fieldPath)\n    return (\n        <FieldChrome fieldPath={props.fieldPath} label={props.definition.attributes.label} info={props.definition.attributes.info} description={props.definition.attributes.description}>\n            <div className=\"btn-group-wrapper\">\n                <div className=\"btn-group btn-group-toggle\">\n                    {props.definition.attributes.options.map((option) => (\n                        <label className={'btn btn-outline-secondary' + (value === option ? ' active' : '')} key={props.fieldPath + '_OPTION_' + option}>\n                            <input\n                                type=\"radio\"\n                                value={option}\n                                checked={option === value}\n                                onChange={event => formValuesContainer.setValue(props.fieldPath, event.currentTarget.value)}\n                            />{option}\n                        </label>))\n                    }\n                </div>\n            </div>\n        </FieldChrome>)\n}","import {times} from \"lodash-es\"\nimport React from \"react\"\nimport {Description} from \"../../display/Description\"\nimport {FormValues} from \"../../state/FormValues\"\nimport {ordinal} from \"../../util\"\nimport {ChildFormElements} from \"../ChildFormElements\"\nimport {FormElementProps} from \"../FormElementProps\"\n\n\nexport interface IterationAttributes {\n    label: string\n    itemLabel: string\n    description: string\n}\n\nexport const List = (props: FormElementProps<IterationAttributes>) => {\n    let formValuesContainer = FormValues.useContainer()\n    return (\n        <div className=\"form-group\">\n            <span className=\"h4 align-middle mr-2\">{props.definition.attributes.label}</span>\n            {props.definition.attributes.description && <Description fieldPath={props.fieldPath} text={props.definition.attributes.description}/>}\n            {times(formValuesContainer.getCollectionSize(props.fieldPath), (index: number) =>\n                <div className={'card border-bottom mb-3' + (index === 0 ? ' mt-2' : '')} key={props.fieldPath + '_COLLECTION_' + index}>\n                    <h5 className=\"card-header\">{ordinal(index + 1)} {props.definition.attributes.itemLabel}\n                        <button className=\"close text-dark\" onClick={() => formValuesContainer.deleteFromCollection(props.fieldPath, index)}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </h5>\n                    <div className=\"card-body pb-0\">\n                        {props.definition.children && <ChildFormElements childFormElements={props.definition.children} parentFieldPath={props.fieldPath + '[' + index + ']'}/>}\n                    </div>\n                </div>\n            )}\n            <button className=\"btn btn-secondary d-inline\" onClick={() => formValuesContainer.addToCollection(props.fieldPath)}>Add</button>\n        </div>)\n}\n","//export const createKey = () => (Math.random() + 1).toString(36).substring(2)\n\nexport const ordinal = (n: number): string => {\n    const s = ['th', 'st', 'nd', 'rd'],\n        v = n % 100\n    return n + (s[(v - 20) % 10] || s[v] || s[0])\n}\n\nexport const createFiledPath = (parentFieldPath: string, fieldId?: string): string => {\n    if (!fieldId) {\n        return parentFieldPath\n    }\n    if (parentFieldPath !== '') {\n        return parentFieldPath + '.' + fieldId\n    }\n    return fieldId\n\n}","import React from \"react\"\r\nimport {createFiledPath} from \"../util\"\r\nimport {FormElementDef} from \"./FormElementDef\"\r\nimport {lookupElement} from \"./formElementTypes\"\r\n\r\ninterface ChildFormElementsProps {\r\n    childFormElements: FormElementDef<any>[]\r\n    parentFieldPath: string\r\n}\r\n\r\nexport const ChildFormElements = (props: ChildFormElementsProps) => {\r\n    //console.log('ChildFormElements', props)\r\n    return (\r\n        <div>\r\n            {props.childFormElements.map((elementDef, index) => {\r\n                const Child: any = lookupElement(elementDef.type)\r\n                return React.createElement(Child, {\r\n                    definition: elementDef,\r\n                    parentFieldPath: props.parentFieldPath,\r\n                    fieldPath: createFiledPath(props.parentFieldPath, elementDef.fieldId),\r\n                    key: props.parentFieldPath + '_' + index\r\n                })\r\n            })}\r\n        </div>)\r\n}","import React from \"react\"\nimport FormDef from \"./FormDef\"\nimport {ChildFormElements} from \"./formElements/ChildFormElements\"\nimport {FormValues} from \"./state/FormValues\"\n\nexport interface FormProps {\n    formDef: FormDef\n}\n\nexport const Form = (props: FormProps) =>\n    (<div className=\"p-2 container\">\n        <FormValues.Provider>\n            <ChildFormElements childFormElements={props.formDef.elements} parentFieldPath=\"\"/>\n        </FormValues.Provider>\n    </div>)","import React from \"react\"\nimport ReactDOM from 'react-dom'\nimport {Form} from \"./Form\"\nimport FormDef from \"./FormDef\"\nimport './index.css'\n\nfetch('exampleFormDefinition.json')\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(response.statusText)\n        }\n        return response.json()\n    })\n    .then((formDef: FormDef) => {\n        ReactDOM.render(\n            <Form formDef={formDef}/>,\n            document.getElementById('form')\n        )\n    })"],"sourceRoot":""}