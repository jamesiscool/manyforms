{"version":3,"sources":["validation/ValidationRule.ts","state/useContainer.tsx","state/ConfigContainer.ts","state/FieldStateContainer.ts","state/ValuesContainer.ts","state/ExpressionContainer.ts","state/ShowIfContainer.ts","util.ts","display/Description.tsx","state/FormStateContainer.ts","state/ValidationContainer.ts","FormDef.ts","formElements/formElementTypes.tsx","display/Label.tsx","display/FieldChrome.tsx","formElements/pagination/Accordion.tsx","formElements/input/Dropdown.tsx","formElements/input/TextInput.tsx","formElements/output/Heading.tsx","formElements/output/Paragraph.tsx","formElements/input/ButtonGroup.tsx","formElements/collection/List.tsx","formElements/ChildFormElements.tsx","Form.tsx","index.tsx"],"names":["validationRuleMap","required","validate","value","length","defaultMessage","email","isEmail","alpha","isAlpha","numeric","isNumeric","alphanumeric","isAlphanumeric","currency","isCurrency","createContainer","useHook","Context","React","createContext","Provider","props","initialState","react_default","a","createElement","children","useContainer","useContext","Error","container","defaultConfig","showErrors","showErrorsDelay","disableNextWhenErrors","ConfigContainer","userConfig","arguments","undefined","config","Object","assign","FieldStateContainer","_useState","useState","_useState2","slicedToArray","fieldStates","setFieldStates","setEventNow","path","event","nextFieldStates","produce","draftFieldStates","fieldState","Date","now","get","focus","valueChanged","blur","ValuesContainer","fieldStateContainer","formValues","setFormValues","setValue","nextFormValues","draftFormValues","set","getValue","addToCollection","oldCollection","newCollection","concat","toConsumableArray","deleteFromCollection","index","slice","getCollectionSize","collection","jexl","addTransform","val","toUpperCase","toLowerCase","addBinaryOp","left","right","ExpressionContainer","valuesContainer","evaluate","fieldDef","expression","fieldValue","context","evalSync","expressionValidations","validIf","invalidIf","requiredIf","ShowIfContainer","expressionContainer","shouldShow","showIf","some","createPath","parentPath","fieldId","Description","id","className","text","FormStateContainer","formState","setFormState","nextClicked","nextFormStates","draftFormState","clearNextClicked","submitClicked","nextOrSubmit","ValidationContainer","formStateContainer","showIfContainer","nextTick","setNextTick","useEffect","setTimeout","validation","reduce","message","constraint","validationRule","isValidationExpresionDef","expressionValidation","name","validateConstraint","shouldShowErrors","timeHasPassedAndShouldShowError","time","validateAndShouldShow","hasErrorsRecursively","childFieldDef","type","childPath","formElementCollectionTypes","hasOwnProperty","size","Label","htmlFor","error","FieldChrome","def","attributes","label","Label_Label","description","Description_Description","formElementNonCollectionTypes","accordion","validationContainer","currentPageRef","useRef","currentPage","setCurrentPage","definition","isFirst","isLast","currentPageHasErrors","disableNext","goToPage","newIndex","current","window","scroll","top","getBoundingClientRect","previous","i","pageDef","next","submit","console","log","role","aria-multiselectable","map","page","key","ref","onClick","ChildFormElements_ChildFormElements","childFormElements","aria-label","classNames","disabled","dropdown","formValuesContainer","FieldChrome_FieldChrome","onChange","currentTarget","aria-describedby","onFocus","onBlur","options","option","textInput","heading","level","paragraph","buttonGroup","setFocus","checked","list","times","n","s","v","ordinal","itemLabel","aria-hidden","formElementTypes","ChildFormElements","elementDef","Child","foundType","warn","lookupElement","Form","formDef","elements","axios","then","response","ReactDOM","render","Form_Form","data","document","getElementById","catch"],"mappings":"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","file":"static/js/main.29a2ee24.chunk.js","sourcesContent":["import isAlpha from 'validator/lib/isAlpha'\r\nimport isAlphanumeric from 'validator/lib/isAlphanumeric'\r\nimport isCurrency from 'validator/lib/isCurrency'\r\nimport isEmail from 'validator/lib/isEmail'\r\nimport isNumeric from 'validator/lib/isNumeric'\r\n\r\ninterface ValidationRule {\r\n    validate: (value: string, args?: string | string[]) => boolean,\r\n    defaultMessage: string\r\n}\r\n\r\nexport const validationRuleMap: { [name: string]: ValidationRule } = {\r\n    required: {\r\n        validate: (value: string) => !(value == null || value.length <= 0 || value === ''),\r\n        defaultMessage: 'This field is required'\r\n    },\r\n    email: {\r\n        validate: (value: string) => isEmail(value),\r\n        defaultMessage: 'This field must be an email address'\r\n    },\r\n    alpha: {\r\n        validate: (value: string) => isAlpha(value),\r\n        defaultMessage: 'This field must be only letters'\r\n    },\r\n    numeric: {\r\n        validate: (value: string) => isNumeric(value),\r\n        defaultMessage: 'This field must be only numbers'\r\n    },\r\n    alphanumeric: {\r\n        validate: (value: string) => isAlphanumeric(value),\r\n        defaultMessage: 'This field must be only letters and numbers'\r\n    },\r\n    currency: {\r\n        validate: (value: string) => isCurrency(value),\r\n        defaultMessage: 'This field must be a currency amount'\r\n    }\r\n}","import React from 'react'\r\n\r\nexport interface ContainerProviderProps<State = any> {\r\n    initialState?: State\r\n    children: React.ReactNode\r\n}\r\n\r\nexport interface Container<Value, State = any> {\r\n    Provider: React.ComponentType<ContainerProviderProps<State>>\r\n    useContainer: () => Value\r\n}\r\n\r\nexport function createContainer<Value, State = any>(useHook: (initialState?: State) => Value): Container<Value, State> {\r\n    let Context = React.createContext<Value | null>(null)\r\n\r\n    function Provider(props: ContainerProviderProps<State>) {\r\n        let value = useHook(props.initialState)\r\n        return <Context.Provider value={value}>{props.children}</Context.Provider>\r\n    }\r\n\r\n    function useContainer(): Value {\r\n        let value = React.useContext(Context)\r\n        if (value === null) {\r\n            throw new Error('Component must be wrapped with <Container.Provider>')\r\n        }\r\n        return value\r\n    }\r\n\r\n    return {Provider, useContainer}\r\n}\r\n\r\nexport function useContainer<Value, State = any>(container: Container<Value, State>): Value {\r\n    return container.useContainer()\r\n}","import {createContainer} from './useContainer'\r\n\r\n\r\ntype showErrors = 'immediately' | 'onFocus' | 'onValueChanged' | 'onBlur' | 'nextOrSummit'\r\n\r\nexport interface Config {\r\n    showErrors: showErrors\r\n    showErrorsDelay: number //milliseconds\r\n    disableNextWhenErrors: boolean\r\n}\r\n\r\nconst defaultConfig: Config = {\r\n    showErrors: 'onFocus',\r\n    showErrorsDelay: 500,\r\n    disableNextWhenErrors: false\r\n}\r\n\r\nexport const ConfigContainer = createContainer((userConfig = {}) => {\r\n    const config = Object.assign(defaultConfig, userConfig)\r\n    return {config}\r\n})","import produce from 'immer'\r\nimport {useState} from 'react'\r\nimport {createContainer} from './useContainer'\r\n\r\ntype Events = 'focus' | 'valueChanged' | 'blur'\r\n\r\ntype FieldState = {\r\n    [Event in Events]: number //Date.now() when field first got focused\r\n}\r\n\r\nexport const FieldStateContainer = createContainer(() => {\r\n    const [fieldStates, setFieldStates] = useState<{ [path: string]: FieldState }>({})\r\n    const get = (path: string) => fieldStates[path] || {}\r\n    const setEventNow = (path: string, event: Events) => {\r\n        const nextFieldStates = produce(fieldStates, draftFieldStates => {\r\n                const fieldState = draftFieldStates[path] || {}\r\n                if (!fieldState[event]) {\r\n                    fieldState[event] = Date.now()\r\n                }\r\n                draftFieldStates[path] = fieldState\r\n            }\r\n        )\r\n        setFieldStates(nextFieldStates)\r\n    }\r\n    const focus = (path: string) => setEventNow(path, 'focus')\r\n    const valueChanged = (path: string) => setEventNow(path, 'valueChanged')\r\n    const blur = (path: string) => setEventNow(path, 'blur')\r\n\r\n    return {fieldStates, get, focus, valueChanged, blur}\r\n})","import produce from 'immer'\r\nimport get from 'lodash-es/get'\r\nimport set from 'lodash-es/set'\r\nimport {useState} from 'react'\r\nimport {FieldStateContainer} from './FieldStateContainer'\r\nimport {createContainer, useContainer} from './useContainer'\r\n\r\nexport const ValuesContainer = createContainer((initialState = {}) => {\r\n    const fieldStateContainer = useContainer(FieldStateContainer)\r\n    const [formValues, setFormValues] = useState<{}>(initialState)\r\n\r\n    const setValue = (path: string, value: any) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            set(draftFormValues, path, value)\r\n        })\r\n        setFormValues(nextFormValues)\r\n        fieldStateContainer.valueChanged(path)\r\n    }\r\n\r\n    function getValue(path: string): string {\r\n        return get(formValues, path)\r\n    }\r\n\r\n    const addToCollection = (path: string) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            const oldCollection = get(draftFormValues, path, [])\r\n            const newCollection = [...oldCollection, {}]\r\n            set(draftFormValues, path, newCollection)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const deleteFromCollection = (path: string, index: number) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            const oldCollection = get(draftFormValues, path)\r\n            const newCollection = [...oldCollection.slice(0, index), ...oldCollection.slice(index + 1)]\r\n            set(draftFormValues, path, newCollection)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const getCollectionSize = (path: string) => {\r\n        const collection = get(formValues, path)\r\n        return collection ? collection.length : 0\r\n    }\r\n    return {formValues, setValue, getValue, addToCollection, deleteFromCollection, getCollectionSize}\r\n})","import jexl from 'jexl'\r\nimport isAlpha from 'validator/lib/isAlpha'\r\nimport isAlphanumeric from 'validator/lib/isAlphanumeric'\r\nimport isCurrency from 'validator/lib/isCurrency'\r\nimport isEmail from 'validator/lib/isEmail'\r\nimport isNumeric from 'validator/lib/isNumeric'\r\nimport {FormElementDef} from '../FormDef'\r\nimport {validationRuleMap} from '../validation/ValidationRule'\r\nimport {ConfigContainer} from './ConfigContainer'\r\nimport {createContainer, useContainer} from './useContainer'\r\nimport {ValuesContainer} from './ValuesContainer'\r\n\r\n//Basic transforms\r\njexl.addTransform('toUpperCase', (val) => val.toUpperCase())\r\njexl.addTransform('toLowerCase', (val) => val.toLowerCase())\r\n\r\n//Transform as a boolean validation\r\njexl.addTransform('isAlpha', (val) => isAlpha(val))\r\njexl.addTransform('isAlphanumeric', (val) => isAlphanumeric(val))\r\njexl.addTransform('isCurrency', (val) => isCurrency(val))\r\njexl.addTransform('isEmail', (val) => isEmail(val))\r\njexl.addTransform('isNumeric', (val) => isNumeric(val))\r\n\r\n//case-insensitive string equality\r\njexl.addBinaryOp('_=', 20, (left, right) => left.toLowerCase() === right.toLowerCase())\r\n\r\ninterface ValidationExpression {\r\n    validate: (path: string, fieldDef: FormElementDef<{}>, expression: string) => boolean,\r\n    defaultMessage: string\r\n}\r\n\r\nfunction useExpression() {\r\n    const config = useContainer(ConfigContainer).config\r\n    const valuesContainer = useContainer(ValuesContainer)\r\n\r\n\r\n    const evaluate = <T>(path: string, fieldDef: FormElementDef<{}>, expression: string): T => {\r\n        const fieldValue = valuesContainer.getValue(path)\r\n        const context = {\r\n            formValues: valuesContainer.formValues,\r\n            fieldValue,\r\n            value: fieldValue,\r\n            config,\r\n            fieldDef\r\n        }\r\n        return jexl.evalSync(expression, context)\r\n    }\r\n\r\n    const expressionValidations: { [name: string]: ValidationExpression } = {\r\n        validIf: {\r\n            validate: (path: string, fieldDef: FormElementDef<{}>, expression: string) => evaluate(path, fieldDef, expression),\r\n            defaultMessage: 'This field is invalid' // The form editor should make the user enter message as this does not give the user any information about why the field is invalid\r\n        },\r\n        invalidIf: {\r\n            validate: (path: string, fieldDef: FormElementDef<{}>, expression: string) => !evaluate(path, fieldDef, expression),\r\n            defaultMessage: 'This field is invalid' // As with validIf form editor should make the user enter message as this does not give the user any information about why the field is invalid\r\n        },\r\n        requiredIf: {\r\n            validate: (path: string, fieldDef: FormElementDef<{}>, expression: string) => {\r\n                if (evaluate(path, fieldDef, expression)) {\r\n                    return validationRuleMap.required.validate(valuesContainer.getValue(path))\r\n                }\r\n                return true\r\n            },\r\n            defaultMessage: validationRuleMap.required.defaultMessage\r\n        }\r\n    }\r\n\r\n    return {evaluate, expressionValidations}\r\n}\r\n\r\nexport const ExpressionContainer = createContainer(useExpression)","import {FormElementDef} from '../FormDef'\nimport {ExpressionContainer} from './ExpressionContainer'\nimport {createContainer, useContainer} from './useContainer'\n\nexport const ShowIfContainer = createContainer(() => {\n    const expressionContainer = useContainer(ExpressionContainer)\n\n    function shouldShow(path: string, fieldDef: FormElementDef<{}>): boolean {\n        if (!fieldDef.showIf) {\n            return true\n        }\n        return fieldDef.showIf.some(expression => expressionContainer.evaluate(path, fieldDef, expression))\n    }\n\n    return {shouldShow}\n})","export const createKey = () => (Math.random() + 1).toString(36).substring(2)\r\n\r\nexport const ordinal = (n: number): string => {\r\n    const s = ['th', 'st', 'nd', 'rd'],\r\n        v = n % 100\r\n    return n + (s[(v - 20) % 10] || s[v] || s[0])\r\n}\r\n\r\nexport const createPath = (parentPath: string, fieldId?: string): string => {\r\n    if (!fieldId) {\r\n        return parentPath\r\n    }\r\n    if (parentPath !== '') {\r\n        return parentPath + '.' + fieldId\r\n    }\r\n    return fieldId\r\n\r\n}","import React from 'react'\n\ninterface DescriptionProps {\n    path: string,\n    text: string\n}\n\nexport const Description = (props: DescriptionProps) => (\n    <div id={props.path + '_description'} className=\"pt-2 text-muted description\">{props.text}</div>\n)","import produce from 'immer'\r\nimport {useState} from 'react'\r\nimport {createContainer} from './useContainer'\r\n\r\ntype FormState = {\r\n    nextClicked?: number\r\n    submitClicked?: number\r\n    nextOrSubmitClicked?: number //Date.now() when field first got focused\r\n}\r\n\r\nexport const FormStateContainer = createContainer(() => {\r\n    const [formState, setFormState] = useState<FormState>({})\r\n\r\n    const nextClicked = () => {\r\n        const nextFormStates = produce(formState, draftFormState => {\r\n                if (!draftFormState.nextClicked) {\r\n                    draftFormState.nextClicked = Date.now()\r\n                }\r\n            }\r\n        )\r\n        setFormState(nextFormStates)\r\n    }\r\n\r\n    const clearNextClicked = () => {\r\n        const nextFormStates = produce(formState, draftFormState => {\r\n                draftFormState.nextClicked = undefined\r\n            }\r\n        )\r\n        setFormState(nextFormStates)\r\n\r\n    }\r\n\r\n    const submitClicked = () => {\r\n        const nextFormStates = produce(formState, draftFormState => {\r\n                if (!draftFormState.submitClicked) {\r\n                    draftFormState.submitClicked = Date.now()\r\n                }\r\n            }\r\n        )\r\n        setFormState(nextFormStates)\r\n    }\r\n\r\n    const nextOrSubmit = (): boolean => {\r\n        return !!formState.nextClicked || !!formState.submitClicked\r\n    }\r\n\r\n    return {formState, nextClicked, clearNextClicked, submitClicked, nextOrSubmit}\r\n})","import {useEffect, useState} from 'react'\r\nimport {FormElementDef, isValidationExpresionDef, ValidationConstraintDef} from '../FormDef'\r\nimport {isTypeACollection} from '../formElements/formElementTypes'\r\nimport {createPath} from '../util'\r\nimport {validationRuleMap} from '../validation/ValidationRule'\r\nimport {ConfigContainer} from './ConfigContainer'\r\nimport {ExpressionContainer} from './ExpressionContainer'\r\nimport {FieldStateContainer} from './FieldStateContainer'\r\nimport {FormStateContainer} from './FormStateContainer'\r\nimport {ShowIfContainer} from './ShowIfContainer'\r\nimport {createContainer, useContainer} from './useContainer'\r\nimport {ValuesContainer} from './ValuesContainer'\r\n\r\nexport const ValidationContainer = createContainer(() => {\r\n    const config = useContainer(ConfigContainer).config\r\n    const valuesContainer = useContainer(ValuesContainer)\r\n    const fieldStateContainer = useContainer(FieldStateContainer)\r\n    const formStateContainer = useContainer(FormStateContainer)\r\n    const expressionContainer = useContainer(ExpressionContainer)\r\n    const showIfContainer = useContainer(ShowIfContainer)\r\n\r\n    const [nextTick, setNextTick] = useState<number>(0)\r\n    useEffect(() => {\r\n        if (nextTick > Date.now()) {\r\n            setTimeout(() => setNextTick(0), nextTick - Date.now())\r\n        }\r\n    }, [nextTick])\r\n\r\n    const validate = (path: string, fieldDef: FormElementDef<{}>): string | null => {\r\n        if (!fieldDef.validation || fieldDef.validation.length <= 0) {\r\n            return null\r\n        }\r\n        return fieldDef.validation.reduce<string | null>((message, constraint): string | null => {\r\n            if (message != null) {\r\n                return message\r\n            }\r\n            return validateConstraint(constraint, path, fieldDef)\r\n        }, null)\r\n    }\r\n\r\n    function validateConstraint(constraint: ValidationConstraintDef | string, path: string, fieldDef: FormElementDef<{}>): string | null {\r\n        if (typeof constraint === 'string') {\r\n            const fieldValue = valuesContainer.getValue(path) || ''\r\n            const validationRule = validationRuleMap[constraint]\r\n            if (!validationRule.validate(fieldValue)) {\r\n                return validationRule.defaultMessage\r\n            }\r\n            return null\r\n        } else if (!isValidationExpresionDef(constraint)) {\r\n            const fieldValue = valuesContainer.getValue(path) || ''\r\n            const validationRule = validationRuleMap[constraint.name]\r\n            if (!validationRule.validate(fieldValue)) {\r\n                return constraint.message || validationRule.defaultMessage\r\n            }\r\n            return null\r\n        } else {\r\n            const expressionValidation = expressionContainer.expressionValidations[constraint.name]\r\n            if (!expressionValidation.validate(path, fieldDef, constraint.expression)) {\r\n                return constraint.message || expressionValidation.defaultMessage\r\n            }\r\n            return null\r\n        }\r\n    }\r\n\r\n    const validateAndShouldShow = (path: string, fieldDef: FormElementDef<{}>): string | null => {\r\n        return shouldShowErrors(path, fieldDef) ? validate(path, fieldDef) : null\r\n    }\r\n\r\n    const shouldShowErrors = (path: string, fieldDef: FormElementDef<{}>): boolean => {\r\n        if (formStateContainer.nextOrSubmit() || config.showErrors === 'immediately') {\r\n            return true\r\n        }\r\n        const fieldState = fieldStateContainer.get(path)\r\n        if (config.showErrors === 'onFocus' && fieldState.focus) {\r\n            return timeHasPassedAndShouldShowError(fieldState.focus)\r\n        }\r\n        if (config.showErrors === 'onValueChanged' && fieldState.valueChanged) {\r\n            return timeHasPassedAndShouldShowError(fieldState.valueChanged)\r\n        }\r\n        if (config.showErrors === 'onBlur' && fieldState.blur) {\r\n            return timeHasPassedAndShouldShowError(fieldState.blur)\r\n        }\r\n        return false\r\n    }\r\n\r\n    const timeHasPassedAndShouldShowError = (time: number) => {\r\n        if (!config.showErrorsDelay || config.showErrorsDelay === 0) {\r\n            return true\r\n        } else if ((time + config.showErrorsDelay) < Date.now()) {\r\n            return true\r\n        } else {\r\n            setNextTick(time + config.showErrorsDelay)\r\n            return false\r\n        }\r\n    }\r\n\r\n    const hasErrorsRecursively = (path: string, fieldDef?: FormElementDef<{}>): boolean => {\r\n        if (!fieldDef || !showIfContainer.shouldShow(path, fieldDef)) {\r\n            return false\r\n        }\r\n        if (validate(path, fieldDef) != null) {\r\n            return true\r\n        }\r\n        if (fieldDef.children) {\r\n            return fieldDef.children.some((childFieldDef) => {\r\n                const childPath = createPath(path, childFieldDef.fieldId)\r\n                if (!showIfContainer.shouldShow(childPath, childFieldDef)) {\r\n                    return false\r\n                }\r\n                if (isTypeACollection(childFieldDef.type)) {\r\n                    const size = valuesContainer.getCollectionSize(childPath)\r\n                    for (let index = 0; index < size; index++) {\r\n                        if (hasErrorsRecursively(childPath + '[' + index + ']', childFieldDef)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                    return false\r\n                } else {\r\n                    return hasErrorsRecursively(childPath, childFieldDef)\r\n                }\r\n            })\r\n        }\r\n        return false\r\n    }\r\n\r\n    return {validate, shouldShowErrors, validateAndShouldShow, hasErrorsRecursively}\r\n})","import {Config} from './state/ConfigContainer'\r\n\r\nexport default interface FormDef {\r\n    elements: FormElementDef<{}>[]\r\n    config?: Config\r\n}\r\n\r\nexport interface FormElementDef<Attributes> {\r\n    type: string,\r\n    attributes: Attributes,\r\n    fieldId?: string,\r\n    children?: Array<FormElementDef<any>>\r\n    validation?: Array<string | ValidationConstraintDef>\r\n    showIf?: string[]\r\n}\r\n\r\nexport type ValidationConstraintDef = ValidationRuleDef | ValidationExpresionDef\r\n\r\nexport function isValidationExpresionDef(constraint: ValidationConstraintDef): constraint is ValidationExpresionDef {\r\n    return (constraint as ValidationExpresionDef).expression !== undefined\r\n}\r\n\r\nexport interface ValidationRuleDef {\r\n    name: string,\r\n    arguments?: string[],\r\n    message?: string\r\n}\r\n\r\nexport interface ValidationExpresionDef {\r\n    name: string,\r\n    expression: string,\r\n    message?: string\r\n}\r\n\r\n","import React from 'react'\r\nimport {List} from './collection/List'\r\nimport {ButtonGroup} from './input/ButtonGroup'\r\nimport {Dropdown} from './input/Dropdown'\r\nimport {TextInput} from './input/TextInput'\r\nimport {Heading} from './output/Heading'\r\nimport {Paragraph} from './output/Paragraph'\r\nimport {Accordion} from './pagination/Accordion'\r\n\r\ninterface FormElementTypesMap {\r\n    [type: string]: React.ReactNode\r\n}\r\n\r\nexport const formElementNonCollectionTypes: FormElementTypesMap = {\r\n    'accordion': Accordion,\r\n    'dropdown': Dropdown,\r\n    'textInput': TextInput,\r\n    'heading': Heading,\r\n    'paragraph': Paragraph,\r\n    'buttonGroup': ButtonGroup,\r\n}\r\n\r\nexport const formElementCollectionTypes: FormElementTypesMap = {\r\n    'list': List\r\n}\r\n\r\nexport const formElementTypes: FormElementTypesMap = Object.assign(formElementNonCollectionTypes, formElementCollectionTypes)\r\n\r\nexport function lookupElement(type: string): React.ReactNode {\r\n    const foundType = formElementTypes[type]\r\n    if (!foundType) {\r\n        console.warn('Could not find form element type:' + type)\r\n        return () => <div>Could not find form element type {type}.</div>\r\n    }\r\n    return foundType\r\n}\r\n\r\nexport function isTypeACollection(type: string): boolean {\r\n    return formElementCollectionTypes.hasOwnProperty(type)\r\n}","import React from 'react'\n\ninterface LabelProps {\n    text: string,\n    htmlFor: string,\n    error: boolean\n}\n\nexport const Label = (props: LabelProps) => <label htmlFor={props.htmlFor} className={'mr-2 h5 ' + (props.error ? 'text-danger' : '')}>{props.text}</label>","import React from 'react'\nimport {FormElementDef} from '../FormDef'\nimport {useContainer} from '../state/useContainer'\nimport {ValidationContainer} from '../state/ValidationContainer'\nimport {Description} from './Description'\nimport {Label} from './Label'\n\n\ninterface FieldChromeProps {\n    path: string\n    def: FormElementDef<any>\n}\n\nexport const FieldChrome: React.FC<FieldChromeProps> = (props) => {\n    const validationContainer = useContainer(ValidationContainer)\n    const error = validationContainer.validateAndShouldShow(props.path, props.def)\n\n    return (<div className=\"form-group pt-2\">\n        {props.def.attributes.label && <Label htmlFor={props.path} text={props.def.attributes.label} error={!!error}/>}\n        {props.children}\n        {error && <div className=\"error-message text-danger pt-2\">{error}</div>}\n        {props.def.attributes.description && <Description path={props.path} text={props.def.attributes.description}/>}\n    </div>)\n}","import classNames from 'classnames'\r\nimport React, {useRef, useState} from 'react'\r\nimport {FormElementDef} from '../../FormDef'\r\nimport {ConfigContainer} from '../../state/ConfigContainer'\r\nimport {FormStateContainer} from '../../state/FormStateContainer'\r\nimport {ShowIfContainer} from '../../state/ShowIfContainer'\r\nimport {useContainer} from '../../state/useContainer'\r\nimport {ValidationContainer} from '../../state/ValidationContainer'\r\nimport {ChildFormElements} from '../ChildFormElements'\r\nimport {FormElementProps} from '../FormElementProps'\r\n\r\nexport const Accordion = (props: FormElementProps<void>) => {\r\n    const config = useContainer(ConfigContainer).config\r\n    const validationContainer = useContainer(ValidationContainer)\r\n    const formStateContainer = useContainer(FormStateContainer)\r\n    const showIfContainer = useContainer(ShowIfContainer)\r\n\r\n    const currentPageRef = useRef<HTMLDivElement>(null)\r\n    const [currentPage, setCurrentPage] = useState<number>(0)\r\n\r\n    if (!props.definition.children) {\r\n        return null\r\n    }\r\n    const isFirst = currentPage === 0\r\n    const isLast = currentPage === (props.definition.children!.length - 1)\r\n    const currentPageHasErrors = () => validationContainer.hasErrorsRecursively(props.path, props.definition.children![currentPage])\r\n    const disableNext = config.disableNextWhenErrors && currentPageHasErrors()\r\n\r\n    const goToPage = (newIndex: number) => {\r\n        setCurrentPage(newIndex)\r\n        if (currentPageRef && currentPageRef.current) {\r\n            window.scroll({top: currentPageRef.current.getBoundingClientRect().top - 100})\r\n        }\r\n    }\r\n\r\n    const previous = () => {\r\n        for (let i = currentPage - 1; i >= 0; i--) {\r\n            const pageDef = props.definition.children && props.definition.children[i]\r\n            if (pageDef && showIfContainer.shouldShow(props.path, pageDef)) {\r\n                goToPage(i)\r\n                formStateContainer.clearNextClicked()\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    const next = () => {\r\n        if (currentPageHasErrors()) {\r\n            formStateContainer.nextClicked()\r\n        } else {\r\n            for (let i = currentPage + 1; i < props.definition.children!.length; i++) {\r\n                const pageDef = props.definition.children && props.definition.children[i]\r\n                if (pageDef && showIfContainer.shouldShow(props.path, pageDef)) {\r\n                    goToPage(i)\r\n                    formStateContainer.clearNextClicked()\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const submit = () => {\r\n        if (currentPageHasErrors()) {\r\n            formStateContainer.submitClicked()\r\n        } else {\r\n            console.log('Submit')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\r\n            {props.definition.children!.map((page, index) => {\r\n                if (!showIfContainer.shouldShow(props.path, page)) {\r\n                    return null\r\n                }\r\n                return (\r\n                    <div className=\"card\" key={props.path + '_PAGE_' + index}>\r\n                        {currentPage === index && <div ref={currentPageRef}/>}\r\n                        <div className=\"card-header cursor-pointer\" onClick={() => goToPage(index)}>\r\n                            <h3 className=\"d-inline\">{page.attributes.label}</h3>{index < currentPage && <button className=\"link-button text-muted px-1\" onClick={() => goToPage(index)}><u>edit</u></button>}\r\n                        </div>\r\n                        {currentPage === index && <div className=\"card-body m-1\">\r\n                            {page.children && <ChildFormElements childFormElements={page.children as FormElementDef<any>[]} parentPath={props.parentPath}/>}\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <nav aria-label=\"Page navigation\">\r\n                                        <ul className=\"pagination mb-0\">\r\n                                            {!isFirst && <li className=\"page-item\">\r\n                                                <button className=\"page-link\" onClick={previous}>Previous</button>\r\n                                            </li>}\r\n                                            {!isLast && <li className={classNames('page-item', {disabled: disableNext})}>\r\n                                                <button className=\"page-link\" onClick={next} disabled={disableNext}>Next</button>\r\n                                            </li>}\r\n                                        </ul>\r\n                                    </nav>\r\n                                </div>\r\n                                {isLast &&\r\n                                <div className=\"col\">\r\n                                    <button className=\"btn btn-primary float-right\" onClick={submit}>Submit</button>\r\n                                </div>}\r\n                            </div>\r\n                        </div>}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}","import React from 'react'\nimport {FieldChrome} from '../../display/FieldChrome'\nimport {FieldStateContainer} from '../../state/FieldStateContainer'\nimport {useContainer} from '../../state/useContainer'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {FormElementProps} from '../FormElementProps'\n\nexport interface DropdownAttributes {\n    label: string\n    description: string\n    info?: string\n    options: string[]\n}\n\nexport const Dropdown = (props: FormElementProps<DropdownAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    const fieldStateContainer = useContainer(FieldStateContainer)\n    return <FieldChrome path={props.path} def={props.definition}>\n        <select\n            className=\"form-control custom-select\"\n            id={props.definition.fieldId}\n            value={formValuesContainer.getValue(props.path) || ''}\n            onChange={event => formValuesContainer.setValue(props.path, event.currentTarget.value)}\n            aria-describedby={props.definition.fieldId + '_description'}\n            onFocus={() => fieldStateContainer.focus(props.path)}\n            onBlur={() => fieldStateContainer.blur(props.path)}\n        >\n            <option value=\"\"/>\n            {props.definition.attributes.options.map((option) => <option value={option} key={option}>{option}</option>)}\n        </select>\n    </FieldChrome>\n}","import React from 'react'\nimport {FieldChrome} from '../../display/FieldChrome'\nimport {FieldStateContainer} from '../../state/FieldStateContainer'\nimport {useContainer} from '../../state/useContainer'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {FormElementProps} from '../FormElementProps'\n\ninterface TextInputAttributes {\n    label: string\n    description: string\n    info?: string\n}\n\nexport const TextInput = (props: FormElementProps<TextInputAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    const fieldStateContainer = useContainer(FieldStateContainer)\n\n    return (<FieldChrome path={props.path} def={props.definition}>\n        <input\n            type=\"text\"\n            className=\"form-control\"\n            id={props.definition.fieldId}\n            aria-describedby={props.path + '_description'}\n            value={formValuesContainer.getValue(props.path) || ''}\n            onChange={event => formValuesContainer.setValue(props.path, event.currentTarget.value)}\n            onFocus={() => fieldStateContainer.focus(props.path)}\n            onBlur={() => fieldStateContainer.blur(props.path)}\n        />\n    </FieldChrome>)\n}","import React from 'react'\nimport {FormElementProps} from '../FormElementProps'\n\ninterface HeadingAttributes {\n    level: number\n    text: string\n}\n\nexport const Heading = (props: FormElementProps<HeadingAttributes>) =>\n    React.createElement('h' + props.definition.attributes.level, null, props.definition.attributes.text)","import React from 'react'\nimport {FormElementProps} from '../FormElementProps'\n\n\ninterface ParagraphAttributes {\n    text: string\n}\n\nexport const Paragraph = (props: FormElementProps<ParagraphAttributes>) => <p>{props.definition.attributes.text}</p>","import React, {useState} from 'react'\nimport {FieldChrome} from '../../display/FieldChrome'\nimport {FieldStateContainer} from '../../state/FieldStateContainer'\nimport {useContainer} from '../../state/useContainer'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {FormElementProps} from '../FormElementProps'\n\ninterface ButtonGroupAttributes {\n    label: string\n    description?: string\n    info?: string\n    options: string[]\n}\n\nexport const ButtonGroup = (props: FormElementProps<ButtonGroupAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    const fieldStateContainer = useContainer(FieldStateContainer)\n    const value = formValuesContainer.getValue(props.path)\n    const [focus, setFocus] = useState<number | null>(null)\n\n    return (\n        <FieldChrome path={props.path} def={props.definition}>\n            <div className=\"btn-group-wrapper\"\n                 onFocus={() => fieldStateContainer.focus(props.path)}\n                 onBlur={() => fieldStateContainer.blur(props.path)}\n            >\n                <div className=\"btn-group btn-group-toggle\">\n                    {props.definition.attributes.options.map((option, index) => (\n                        <label\n                            className={'btn btn-outline-secondary' + (value === option ? ' active' : '') + (focus === index ? ' focus' : '')}\n                            key={props.path + '_OPTION_' + option}\n                            onFocus={() => setFocus(index)}\n                            onBlur={() => setFocus(null)}\n                        >\n                            <input\n                                type=\"radio\"\n                                value={option}\n                                checked={option === value}\n                                onChange={event => formValuesContainer.setValue(props.path, event.currentTarget.value)}\n                            />{option}\n                        </label>))\n                    }\n                </div>\n            </div>\n        </FieldChrome>)\n}","import {times} from 'lodash-es'\nimport React from 'react'\nimport {Description} from '../../display/Description'\nimport {useContainer} from '../../state/useContainer'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {ordinal} from '../../util'\nimport {ChildFormElements} from '../ChildFormElements'\nimport {FormElementProps} from '../FormElementProps'\n\n\nexport interface IterationAttributes {\n    label: string\n    itemLabel: string\n    description: string\n}\n\nexport const List = (props: FormElementProps<IterationAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    return (\n        <div className=\"form-group\">\n            <span className=\"h4 align-middle mr-2\">{props.definition.attributes.label}</span>\n            {props.definition.attributes.description && <Description path={props.path} text={props.definition.attributes.description}/>}\n            {times(formValuesContainer.getCollectionSize(props.path), (index: number) =>\n                <div className={'card border-bottom mb-3' + (index === 0 ? ' mt-2' : '')} key={props.path + '_COLLECTION_' + index}>\n                    <h5 className=\"card-header\">{ordinal(index + 1)} {props.definition.attributes.itemLabel}\n                        <button className=\"close text-dark\" onClick={() => formValuesContainer.deleteFromCollection(props.path, index)}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </h5>\n                    <div className=\"card-body pb-0\">\n                        {props.definition.children && <ChildFormElements childFormElements={props.definition.children} parentPath={props.path + '[' + index + ']'}/>}\n                    </div>\n                </div>\n            )}\n            <button className=\"btn btn-secondary d-inline\" onClick={() => formValuesContainer.addToCollection(props.path)}>Add</button>\n        </div>)\n}\n","import React from 'react'\r\nimport {FormElementDef} from '../FormDef'\r\nimport {ShowIfContainer} from '../state/ShowIfContainer'\r\nimport {useContainer} from '../state/useContainer'\r\nimport {createPath} from '../util'\r\nimport {lookupElement} from './formElementTypes'\r\n\r\ninterface ChildFormElementsProps {\r\n    childFormElements: FormElementDef<any>[]\r\n    parentPath: string\r\n}\r\n\r\nexport const ChildFormElements = (props: ChildFormElementsProps) => {\r\n    const showIfContainer = useContainer(ShowIfContainer)\r\n    return (\r\n        <div>\r\n            {props.childFormElements.map((elementDef, index) => {\r\n                const path = createPath(props.parentPath, elementDef.fieldId)\r\n                if (!showIfContainer.shouldShow(path, elementDef)) {\r\n                    return null\r\n                }\r\n                const Child: any = lookupElement(elementDef.type)\r\n                return React.createElement(Child, {\r\n                    definition: elementDef,\r\n                    parentPath: props.parentPath,\r\n                    path: path,\r\n                    key: props.parentPath + '_' + index\r\n                })\r\n            })}\r\n        </div>)\r\n}","import React from 'react'\nimport FormDef from './FormDef'\nimport {ChildFormElements} from './formElements/ChildFormElements'\nimport {ConfigContainer} from './state/ConfigContainer'\nimport {ExpressionContainer} from './state/ExpressionContainer'\nimport {FieldStateContainer} from './state/FieldStateContainer'\nimport {FormStateContainer} from './state/FormStateContainer'\nimport {ShowIfContainer} from './state/ShowIfContainer'\nimport {ValidationContainer} from './state/ValidationContainer'\nimport {ValuesContainer} from './state/ValuesContainer'\n\nexport interface FormProps {\n    formDef: FormDef\n}\n\nexport const Form = (props: FormProps) =>\n    (<div className=\"p-2 container\">\n        <ConfigContainer.Provider initialState={props.formDef.config}>\n            <FormStateContainer.Provider>\n                <FieldStateContainer.Provider>\n                    <ValuesContainer.Provider>\n                        <ExpressionContainer.Provider>\n                            <ShowIfContainer.Provider>\n                                <ValidationContainer.Provider>\n                                    <ChildFormElements childFormElements={props.formDef.elements} parentPath=\"\"/>\n                                </ValidationContainer.Provider>\n                            </ShowIfContainer.Provider>\n                        </ExpressionContainer.Provider>\n                    </ValuesContainer.Provider>\n                </FieldStateContainer.Provider>\n            </FormStateContainer.Provider>\n        </ConfigContainer.Provider>\n    </div>)","import axios from 'axios'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Form} from './Form'\nimport FormDef from './FormDef'\nimport './index.css'\n\naxios.get<FormDef>('exampleFormDefinition.json')\n    .then(function (response) {\n        ReactDOM.render(\n            <Form formDef={response.data}/>,\n            document.getElementById('form')\n        )\n    })\n    .catch(function (error) {\n        console.error(error)\n        throw new Error(error)\n    })"],"sourceRoot":""}