{"version":3,"sources":["validation/ValidationRule.ts","state/ConfigContainer.ts","state/FieldStateContainer.ts","state/ValuesContainer.ts","state/ExpressionContainer.ts","state/ShowIfContainer.ts","util.ts","display/Description.tsx","state/FormStateContainer.ts","state/ValidationContainer.ts","FormDef.ts","formElements/formElementTypes.tsx","display/Label.tsx","display/FieldChrome.tsx","formElements/pagination/Accordion.tsx","formElements/input/Dropdown.tsx","formElements/input/TextInput.tsx","formElements/output/Heading.tsx","formElements/output/Paragraph.tsx","formElements/input/ButtonGroup.tsx","formElements/collection/List.tsx","formElements/ChildFormElements.tsx","Form.tsx","index.tsx"],"names":["validationRuleMap","required","validate","value","length","defaultMessage","email","isEmail","alpha","isAlpha","numeric","isNumeric","alphanumeric","isAlphanumeric","currency","isCurrency","defaultConfig","showErrors","showErrorsDelay","disableNextWhenErrors","ConfigContainer","createContainer","userConfig","arguments","undefined","config","Object","assign","FieldStateContainer","_useState","useState","_useState2","slicedToArray","fieldStates","setFieldStates","setEventNow","path","event","nextFieldStates","produce","draftFieldStates","fieldState","Date","now","get","focus","valueChanged","blur","ValuesContainer","initialState","fieldStateContainer","useContainer","formValues","setFormValues","setValue","nextFormValues","draftFormValues","set","getValue","addToCollection","oldCollection","newCollection","concat","toConsumableArray","deleteFromCollection","index","slice","getCollectionSize","collection","jexl","addTransform","val","toUpperCase","toLowerCase","addBinaryOp","left","right","ExpressionContainer","valuesContainer","evaluate","fieldDef","expression","fieldValue","context","evalSync","expressionValidations","validIf","invalidIf","requiredIf","ShowIfContainer","expressionContainer","shouldShow","showIf","some","createPath","parentPath","fieldId","Description","props","react_default","a","createElement","id","className","text","FormStateContainer","formState","setFormState","nextClicked","nextFormStates","draftFormState","clearNextClicked","submitClicked","nextOrSubmit","ValidationContainer","formStateContainer","nextTick","setNextTick","useEffect","setTimeout","validation","reduce","message","constraint","validationRule","isValidationExpresionDef","expressionValidation","name","validateConstraint","shouldShowErrors","timeHasPassedAndShouldShowError","time","validateAndShouldShow","validateRecursively","children","childFieldDef","type","childPath","formElementCollectionTypes","hasOwnProperty","size","Label","htmlFor","error","FieldChrome","def","attributes","label","Label_Label","description","Description_Description","formElementNonCollectionTypes","accordion","validationContainer","currentPageRef","useRef","currentPage","setCurrentPage","definition","isFirst","isLast","currentPageHasErrors","disableNext","goToPage","newIndex","current","window","scroll","top","getBoundingClientRect","previous","next","submit","console","log","role","aria-multiselectable","map","page","key","ref","onClick","ChildFormElements_ChildFormElements","childFormElements","aria-label","classNames","disabled","dropdown","formValuesContainer","FieldChrome_FieldChrome","onChange","currentTarget","aria-describedby","onFocus","onBlur","options","option","textInput","heading","React","level","paragraph","buttonGroup","setFocus","checked","list","times","n","s","v","ordinal","itemLabel","aria-hidden","formElementTypes","ChildFormElements","showIfContainer","elementDef","Child","foundType","warn","lookupElement","Form","Provider","formDef","elements","axios","then","response","ReactDOM","render","Form_Form","data","document","getElementById","catch","Error"],"mappings":"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","file":"static/js/main.bc7d8d91.chunk.js","sourcesContent":["import isAlpha from 'validator/lib/isAlpha'\r\nimport isAlphanumeric from 'validator/lib/isAlphanumeric'\r\nimport isCurrency from 'validator/lib/isCurrency'\r\nimport isEmail from 'validator/lib/isEmail'\r\nimport isNumeric from 'validator/lib/isNumeric'\r\n\r\ninterface ValidationRule {\r\n    validate: (value: string, args?: string | string[]) => boolean,\r\n    defaultMessage: string\r\n}\r\n\r\nexport const validationRuleMap: { [name: string]: ValidationRule } = {\r\n    required: {\r\n        validate: (value: string) => !(value == null || value.length <= 0 || value === ''),\r\n        defaultMessage: 'This field is required'\r\n    },\r\n    email: {\r\n        validate: (value: string) => isEmail(value),\r\n        defaultMessage: 'This field must be an email address'\r\n    },\r\n    alpha: {\r\n        validate: (value: string) => isAlpha(value),\r\n        defaultMessage: 'This field must be only letters'\r\n    },\r\n    numeric: {\r\n        validate: (value: string) => isNumeric(value),\r\n        defaultMessage: 'This field must be only numbers'\r\n    },\r\n    alphanumeric: {\r\n        validate: (value: string) => isAlphanumeric(value),\r\n        defaultMessage: 'This field must be only letters and numbers'\r\n    },\r\n    currency: {\r\n        validate: (value: string) => isCurrency(value),\r\n        defaultMessage: 'This field must be a currency amount'\r\n    }\r\n}","import {createContainer} from 'unstated-next'\r\n\r\ntype showErrors = 'immediately' | 'afterFocus' | 'afterValueChanged' | 'afterBlur' | 'nextOrSummit'\r\n\r\nexport interface Config {\r\n    showErrors: showErrors\r\n    showErrorsDelay: number //milliseconds\r\n    disableNextWhenErrors: boolean\r\n}\r\n\r\nconst defaultConfig: Config = {\r\n    showErrors: 'afterFocus',\r\n    showErrorsDelay: 1000   ,\r\n    disableNextWhenErrors: false\r\n}\r\n\r\nexport const useConfig = (userConfig = {}) => {\r\n    const config = Object.assign(defaultConfig, userConfig)\r\n    return {config}\r\n}\r\n\r\nexport const ConfigContainer = createContainer(useConfig)","import produce from 'immer'\r\nimport {useState} from 'react'\r\nimport {createContainer} from 'unstated-next'\r\n\r\ntype Events = 'focus' | 'valueChanged' | 'blur'\r\n\r\ntype FieldState = {\r\n    [Event in Events]: number //Date.now() when field first got focused\r\n}\r\n\r\nexport function useFieldState() {\r\n    const [fieldStates, setFieldStates] = useState<{ [path: string]: FieldState }>({})\r\n    const get = (path: string) => fieldStates[path] || {}\r\n    const setEventNow = (path: string, event: Events) => {\r\n        const nextFieldStates = produce(fieldStates, draftFieldStates => {\r\n                const fieldState = draftFieldStates[path] || {}\r\n                if (!fieldState[event]) {\r\n                    fieldState[event] = Date.now()\r\n                }\r\n                draftFieldStates[path] = fieldState\r\n            }\r\n        )\r\n        setFieldStates(nextFieldStates)\r\n    }\r\n    const focus = (path: string) => setEventNow(path, 'focus')\r\n    const valueChanged = (path: string) => setEventNow(path, 'valueChanged')\r\n    const blur = (path: string) => setEventNow(path, 'blur')\r\n\r\n    return {fieldStates, get, focus, valueChanged, blur}\r\n}\r\n\r\nexport const FieldStateContainer = createContainer(useFieldState)","import produce from 'immer'\r\nimport get from 'lodash-es/get'\r\nimport set from 'lodash-es/set'\r\nimport {useState} from 'react'\r\nimport {createContainer, useContainer} from 'unstated-next'\r\nimport {FieldStateContainer} from './FieldStateContainer'\r\n\r\nexport function useValues(initialState = {}) {\r\n    const fieldStateContainer = useContainer(FieldStateContainer)\r\n\r\n    const [formValues, setFormValues] = useState(initialState)\r\n\r\n    const setValue = (path: string, value: any) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            set(draftFormValues, path, value)\r\n        })\r\n        setFormValues(nextFormValues)\r\n        fieldStateContainer.valueChanged(path)\r\n    }\r\n\r\n    function getValue(path: string): string {\r\n        return get(formValues, path)\r\n    }\r\n\r\n    const addToCollection = (path: string) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            const oldCollection = get(draftFormValues, path, [])\r\n            const newCollection = [...oldCollection, {}]\r\n            set(draftFormValues, path, newCollection)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const deleteFromCollection = (path: string, index: number) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            const oldCollection = get(draftFormValues, path)\r\n            const newCollection = [...oldCollection.slice(0, index), ...oldCollection.slice(index + 1)]\r\n            set(draftFormValues, path, newCollection)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const getCollectionSize = (path: string) => {\r\n        const collection = get(formValues, path)\r\n        return collection ? collection.length : 0\r\n    }\r\n    return {formValues, setValue, getValue, addToCollection, deleteFromCollection, getCollectionSize}\r\n}\r\n\r\nexport const ValuesContainer = createContainer(useValues)","import jexl from 'jexl'\r\nimport {createContainer, useContainer} from 'unstated-next'\r\nimport isAlpha from 'validator/lib/isAlpha'\r\nimport isAlphanumeric from 'validator/lib/isAlphanumeric'\r\nimport isCurrency from 'validator/lib/isCurrency'\r\nimport isEmail from 'validator/lib/isEmail'\r\nimport isNumeric from 'validator/lib/isNumeric'\r\nimport {FormElementDef} from '../FormDef'\r\nimport {validationRuleMap} from '../validation/ValidationRule'\r\nimport {ConfigContainer} from './ConfigContainer'\r\nimport {ValuesContainer} from './ValuesContainer'\r\n\r\n//Basic transforms\r\njexl.addTransform('toUpperCase', (val) => val.toUpperCase())\r\njexl.addTransform('toLowerCase', (val) => val.toLowerCase())\r\n\r\n//Transform as a boolean validation\r\njexl.addTransform('isAlpha', (val) => isAlpha(val))\r\njexl.addTransform('isAlphanumeric', (val) => isAlphanumeric(val))\r\njexl.addTransform('isCurrency', (val) => isCurrency(val))\r\njexl.addTransform('isEmail', (val) => isEmail(val))\r\njexl.addTransform('isNumeric', (val) => isNumeric(val))\r\n\r\n//case-insensitive string equality\r\njexl.addBinaryOp('_=', 20, (left, right) => left.toLowerCase() === right.toLowerCase())\r\n\r\ninterface ValidationExpression {\r\n    validate: (path: string, fieldDef: FormElementDef<{}>, expression: string) => boolean,\r\n    defaultMessage: string\r\n}\r\n\r\nfunction useExpression() {\r\n    const config = useContainer(ConfigContainer).config\r\n    const valuesContainer = useContainer(ValuesContainer)\r\n\r\n\r\n    const evaluate = <T>(path: string, fieldDef: FormElementDef<{}>, expression: string): T => {\r\n        const fieldValue = valuesContainer.getValue(path)\r\n        const context = {\r\n            formValues: valuesContainer.formValues,\r\n            fieldValue,\r\n            value: fieldValue,\r\n            config,\r\n            fieldDef\r\n        }\r\n        return jexl.evalSync(expression, context)\r\n    }\r\n\r\n    const expressionValidations: { [name: string]: ValidationExpression } = {\r\n        validIf: {\r\n            validate: (path: string, fieldDef: FormElementDef<{}>, expression: string) => evaluate(path, fieldDef, expression),\r\n            defaultMessage: 'This field is invalid' // The form editor should make the user enter message as this does not give the user any information about why the field is invalid\r\n        },\r\n        invalidIf: {\r\n            validate: (path: string, fieldDef: FormElementDef<{}>, expression: string) => !evaluate(path, fieldDef, expression),\r\n            defaultMessage: 'This field is invalid' // As with validIf form editor should make the user enter message as this does not give the user any information about why the field is invalid\r\n        },\r\n        requiredIf: {\r\n            validate: (path: string, fieldDef: FormElementDef<{}>, expression: string) => {\r\n                if (evaluate(path, fieldDef, expression)) {\r\n                    return validationRuleMap.required.validate(valuesContainer.getValue(path))\r\n                }\r\n                return true\r\n            },\r\n            defaultMessage: validationRuleMap.required.defaultMessage\r\n        }\r\n    }\r\n\r\n    return {evaluate, expressionValidations}\r\n}\r\n\r\nexport const ExpressionContainer = createContainer(useExpression)","import {createContainer, useContainer} from 'unstated-next'\r\nimport {FormElementDef} from '../FormDef'\r\nimport {ExpressionContainer} from './ExpressionContainer'\r\n\r\nfunction useShowIf() {\r\n    const expressionContainer = useContainer(ExpressionContainer)\r\n\r\n    function shouldShow(path: string, fieldDef: FormElementDef<{}>): boolean {\r\n        if (!fieldDef.showIf) {\r\n            return true\r\n        }\r\n        return fieldDef.showIf.some(expression => expressionContainer.evaluate(path, fieldDef, expression))\r\n    }\r\n\r\n    return {shouldShow}\r\n}\r\n\r\nexport const ShowIfContainer = createContainer(useShowIf)","//export const createKey = () => (Math.random() + 1).toString(36).substring(2)\n\nexport const ordinal = (n: number): string => {\n    const s = ['th', 'st', 'nd', 'rd'],\n        v = n % 100\n    return n + (s[(v - 20) % 10] || s[v] || s[0])\n}\n\nexport const createPath = (parentPath: string, fieldId?: string): string => {\n    if (!fieldId) {\n        return parentPath\n    }\n    if (parentPath !== '') {\n        return parentPath + '.' + fieldId\n    }\n    return fieldId\n\n}","import React from 'react'\n\ninterface DescriptionProps {\n    path: string,\n    text: string\n}\n\nexport const Description = (props: DescriptionProps) => (\n    <div id={props.path + '_description'} className=\"pt-2 text-muted description\">{props.text}</div>\n)","import produce from 'immer'\r\nimport {useState} from 'react'\r\nimport {createContainer} from 'unstated-next'\r\n\r\ntype FormState = {\r\n    nextClicked?: number\r\n    submitClicked?: number\r\n    nextOrSubmitClicked?: number //Date.now() when field first got focused\r\n}\r\n\r\nexport function useFormState() {\r\n    const [formState, setFormState] = useState<FormState>({})\r\n\r\n    const nextClicked = () => {\r\n        const nextFormStates = produce(formState, draftFormState => {\r\n                if (!draftFormState.nextClicked) {\r\n                    draftFormState.nextClicked = Date.now()\r\n                }\r\n            }\r\n        )\r\n        setFormState(nextFormStates)\r\n    }\r\n\r\n    const clearNextClicked = () => {\r\n        const nextFormStates = produce(formState, draftFormState => {\r\n                draftFormState.nextClicked = undefined\r\n            }\r\n        )\r\n        setFormState(nextFormStates)\r\n\r\n    }\r\n\r\n    const submitClicked = () => {\r\n        const nextFormStates = produce(formState, draftFormState => {\r\n                if (!draftFormState.submitClicked) {\r\n                    draftFormState.submitClicked = Date.now()\r\n                }\r\n            }\r\n        )\r\n        setFormState(nextFormStates)\r\n    }\r\n\r\n    const nextOrSubmit = (): boolean => {\r\n        return !!formState.nextClicked || !!formState.submitClicked\r\n    }\r\n\r\n    return {formState, nextClicked, clearNextClicked, submitClicked, nextOrSubmit}\r\n}\r\n\r\nexport const FormStateContainer = createContainer(useFormState)","import {useEffect, useState} from 'react'\r\nimport {createContainer, useContainer} from 'unstated-next'\r\nimport {FormElementDef, isValidationExpresionDef, ValidationConstraintDef} from '../FormDef'\r\nimport {isTypeACollection} from '../formElements/formElementTypes'\r\nimport {createPath} from '../util'\r\nimport {validationRuleMap} from '../validation/ValidationRule'\r\nimport {ConfigContainer} from './ConfigContainer'\r\nimport {ExpressionContainer} from './ExpressionContainer'\r\nimport {FieldStateContainer} from './FieldStateContainer'\r\nimport {FormStateContainer} from './FormStateContainer'\r\nimport {ValuesContainer} from './ValuesContainer'\r\n\r\nfunction useValidation() {\r\n    const config = useContainer(ConfigContainer).config\r\n    const valuesContainer = useContainer(ValuesContainer)\r\n    const fieldStateContainer = useContainer(FieldStateContainer)\r\n    const formStateContainer = useContainer(FormStateContainer)\r\n    const expressionContainer = useContainer(ExpressionContainer)\r\n\r\n    const [nextTick, setNextTick] = useState<number>(0)\r\n    useEffect(() => {\r\n        if (nextTick > Date.now()) {\r\n            setTimeout(() => setNextTick(0), nextTick - Date.now())\r\n        }\r\n    }, [nextTick])\r\n\r\n    const validate = (path: string, fieldDef: FormElementDef<{}>): string | null => {\r\n        if (!fieldDef.validation || fieldDef.validation.length <= 0) {\r\n            return null\r\n        }\r\n        return fieldDef.validation.reduce<string | null>((message, constraint): string | null => {\r\n            if (message != null) {\r\n                return message\r\n            }\r\n            return validateConstraint(constraint, path, fieldDef)\r\n        }, null)\r\n    }\r\n\r\n    function validateConstraint(constraint: ValidationConstraintDef | string, path: string, fieldDef: FormElementDef<{}>): string | null {\r\n        if (typeof constraint === 'string') {\r\n            const fieldValue = valuesContainer.getValue(path) || ''\r\n            const validationRule = validationRuleMap[constraint]\r\n            if (!validationRule.validate(fieldValue)) {\r\n                return validationRule.defaultMessage\r\n            }\r\n            return null\r\n        } else if (!isValidationExpresionDef(constraint)) {\r\n            const fieldValue = valuesContainer.getValue(path) || ''\r\n            const validationRule = validationRuleMap[constraint.name]\r\n            if (!validationRule.validate(fieldValue)) {\r\n                return constraint.message || validationRule.defaultMessage\r\n            }\r\n            return null\r\n        } else {\r\n            const expressionValidation = expressionContainer.expressionValidations[constraint.name]\r\n            if (!expressionValidation.validate(path, fieldDef, constraint.expression)) {\r\n                return constraint.message || expressionValidation.defaultMessage\r\n            }\r\n            return null\r\n        }\r\n    }\r\n\r\n    const validateAndShouldShow = (path: string, fieldDef: FormElementDef<{}>): string | null => {\r\n        return shouldShowErrors(path, fieldDef) ? validate(path, fieldDef) : null\r\n    }\r\n\r\n    const shouldShowErrors = (path: string, fieldDef: FormElementDef<{}>): boolean => {\r\n        if (formStateContainer.nextOrSubmit() || config.showErrors === 'immediately') {\r\n            return true\r\n        }\r\n        const fieldState = fieldStateContainer.get(path)\r\n        if (config.showErrors === 'afterFocus' && fieldState.focus) {\r\n            return timeHasPassedAndShouldShowError(fieldState.focus)\r\n        }\r\n        if (config.showErrors === 'afterValueChanged' && fieldState.valueChanged) {\r\n            return timeHasPassedAndShouldShowError(fieldState.valueChanged)\r\n        }\r\n        if (config.showErrors === 'afterBlur' && fieldState.blur) {\r\n            return timeHasPassedAndShouldShowError(fieldState.blur)\r\n        }\r\n        return false\r\n    }\r\n\r\n    const timeHasPassedAndShouldShowError = (time: number) => {\r\n        if (!config.showErrorsDelay || config.showErrorsDelay === 0) {\r\n            return true\r\n        } else if ((time + config.showErrorsDelay) < Date.now()) {\r\n            return true\r\n        } else {\r\n            setNextTick(time + config.showErrorsDelay)\r\n            return false\r\n        }\r\n    }\r\n\r\n    const validateRecursively = (path: string, fieldDef?: FormElementDef<{}>): boolean => {\r\n        if (!fieldDef) {\r\n            return false\r\n        }\r\n        if (validate(path, fieldDef) != null) {\r\n            return true\r\n        }\r\n        if (fieldDef.children) {\r\n            return fieldDef.children.some((childFieldDef) => {\r\n                const childPath = createPath(path, childFieldDef.fieldId)\r\n                if (isTypeACollection(childFieldDef.type)) {\r\n                    const size = valuesContainer.getCollectionSize(childPath)\r\n                    for (let index = 0; index < size; index++) {\r\n                        if (validateRecursively(childPath + '[' + index + ']', childFieldDef)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                    return false\r\n                } else {\r\n                    return validateRecursively(childPath, childFieldDef)\r\n                }\r\n            })\r\n        }\r\n        return false\r\n    }\r\n\r\n    return {validate, shouldShowErrors, validateAndShouldShow, validateRecursively}\r\n}\r\n\r\nexport const ValidationContainer = createContainer(useValidation)","import {Config} from './state/ConfigContainer'\r\n\r\nexport default interface FormDef {\r\n    elements: FormElementDef<{}>[]\r\n    config?: Config\r\n}\r\n\r\nexport interface FormElementDef<Attributes> {\r\n    type: string,\r\n    attributes: Attributes,\r\n    fieldId?: string,\r\n    children?: Array<FormElementDef<any>>\r\n    validation?: Array<string | ValidationConstraintDef>\r\n    showIf?: string[]\r\n}\r\n\r\nexport type ValidationConstraintDef = ValidationRuleDef | ValidationExpresionDef\r\n\r\nexport function isValidationExpresionDef(constraint: ValidationConstraintDef): constraint is ValidationExpresionDef {\r\n    return (constraint as ValidationExpresionDef).expression !== undefined\r\n}\r\n\r\nexport interface ValidationRuleDef {\r\n    name: string,\r\n    arguments?: string[],\r\n    message?: string\r\n}\r\n\r\nexport interface ValidationExpresionDef {\r\n    name: string,\r\n    expression: string,\r\n    message?: string\r\n}\r\n\r\n","import React from 'react'\r\nimport {List} from './collection/List'\r\nimport {ButtonGroup} from './input/ButtonGroup'\r\nimport {Dropdown} from './input/Dropdown'\r\nimport {TextInput} from './input/TextInput'\r\nimport {Heading} from './output/Heading'\r\nimport {Paragraph} from './output/Paragraph'\r\nimport {Accordion} from './pagination/Accordion'\r\n\r\ninterface FormElementTypesMap {\r\n    [type: string]: React.ReactNode\r\n}\r\n\r\nexport const formElementNonCollectionTypes: FormElementTypesMap = {\r\n    'accordion': Accordion,\r\n    'dropdown': Dropdown,\r\n    'textInput': TextInput,\r\n    'heading': Heading,\r\n    'paragraph': Paragraph,\r\n    'buttonGroup': ButtonGroup,\r\n}\r\n\r\nexport const formElementCollectionTypes: FormElementTypesMap = {\r\n    'list': List\r\n}\r\n\r\nexport const formElementTypes: FormElementTypesMap = Object.assign(formElementNonCollectionTypes, formElementCollectionTypes)\r\n\r\nexport function lookupElement(type: string): React.ReactNode {\r\n    const foundType = formElementTypes[type]\r\n    if (!foundType) {\r\n        console.warn('Could not find form element type:' + type)\r\n        return () => <div>Could not find form element type {type}.</div>\r\n    }\r\n    return foundType\r\n}\r\n\r\nexport function isTypeACollection(type: string): boolean {\r\n    return formElementCollectionTypes.hasOwnProperty(type)\r\n}","import React from 'react'\n\ninterface LabelProps {\n    text: string,\n    htmlFor: string,\n    error: boolean\n}\n\nexport const Label = (props: LabelProps) => <label htmlFor={props.htmlFor} className={'mr-2 h5 ' + (props.error ? 'text-danger' : '')}>{props.text}</label>","import React from 'react'\nimport {useContainer} from 'unstated-next'\nimport {FormElementDef} from '../FormDef'\nimport {ValidationContainer} from '../state/ValidationContainer'\nimport {Description} from './Description'\nimport {Label} from './Label'\n\n\ninterface FieldChromeProps {\n    path: string\n    def: FormElementDef<any>\n}\n\nexport const FieldChrome: React.FC<FieldChromeProps> = (props) => {\n    const validationContainer = useContainer(ValidationContainer)\n    const error = validationContainer.validateAndShouldShow(props.path, props.def)\n\n    return (<div className=\"form-group py-2\">\n        {props.def.attributes.label && <Label htmlFor={props.path} text={props.def.attributes.label} error={!!error}/>}\n        {props.children}\n        {error && <div className=\"error-message text-danger pt-2\">{error}</div>}\n        {props.def.attributes.description && <Description path={props.path} text={props.def.attributes.description}/>}\n    </div>)\n}","import classNames from 'classnames'\r\nimport React, {useRef, useState} from 'react'\r\nimport {useContainer} from 'unstated-next'\r\nimport {FormElementDef} from '../../FormDef'\r\nimport {ConfigContainer} from '../../state/ConfigContainer'\r\nimport {FormStateContainer} from '../../state/FormStateContainer'\r\nimport {ValidationContainer} from '../../state/ValidationContainer'\r\nimport {ChildFormElements} from '../ChildFormElements'\r\nimport {FormElementProps} from '../FormElementProps'\r\n\r\nexport interface AccordionAttributes {\r\n}\r\n\r\nexport const Accordion = (props: FormElementProps<AccordionAttributes>) => {\r\n    const config = useContainer(ConfigContainer).config\r\n    const validationContainer = useContainer(ValidationContainer)\r\n    const formStateContainer = useContainer(FormStateContainer)\r\n\r\n    const currentPageRef = useRef<HTMLDivElement>(null)\r\n    const [currentPage, setCurrentPage] = useState<number>(0)\r\n\r\n    if (!props.definition.children) {\r\n        return null\r\n    }\r\n    const isFirst = currentPage === 0\r\n    const isLast = currentPage === (props.definition.children!.length - 1)\r\n    const currentPageHasErrors = validationContainer.validateRecursively(props.path, props.definition.children[currentPage])\r\n    const disableNext = config.disableNextWhenErrors && currentPageHasErrors\r\n\r\n    const goToPage = (newIndex: number) => {\r\n        setCurrentPage(newIndex)\r\n        if (currentPageRef && currentPageRef.current) {\r\n            window.scroll({top: currentPageRef.current.getBoundingClientRect().top - 100})\r\n        }\r\n    }\r\n\r\n    const previous = () => {\r\n        goToPage(currentPage - 1)\r\n        formStateContainer.clearNextClicked()\r\n\r\n    }\r\n\r\n    const next = () => {\r\n        if (currentPageHasErrors) {\r\n            formStateContainer.nextClicked()\r\n        } else {\r\n            formStateContainer.clearNextClicked()\r\n            goToPage(currentPage + 1)\r\n        }\r\n    }\r\n\r\n    const submit = () => {\r\n        if (currentPageHasErrors) {\r\n            formStateContainer.submitClicked()\r\n        } else {\r\n            console.log('Submit')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\r\n            {props.definition.children!.map((page, index) => (\r\n                <div className=\"card\" key={props.path + '_PAGE_' + index}>\r\n                    {currentPage === index && <div ref={currentPageRef}/>}\r\n                    <div className=\"card-header cursor-pointer\" onClick={() => goToPage(index)}>\r\n                        <h3 className=\"d-inline\">{page.attributes.label}</h3>{index < currentPage && <button className=\"link-button text-muted px-1\" onClick={() => goToPage(index)}><u>edit</u></button>}\r\n                    </div>\r\n                    {currentPage === index && <div className=\"card-body m-1\">\r\n                        {page.children && <ChildFormElements childFormElements={page.children as FormElementDef<any>[]} parentPath={props.parentPath}/>}\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <nav aria-label=\"Page navigation\">\r\n                                    <ul className=\"pagination mb-0\">\r\n                                        {!isFirst && <li className=\"page-item\">\r\n                                            <button className=\"page-link\" onClick={previous}>Previous</button>\r\n                                        </li>}\r\n                                        {!isLast && <li className={classNames('page-item', {disabled: disableNext})}>\r\n                                            <button className=\"page-link\" onClick={next} disabled={disableNext}>Next</button>\r\n                                        </li>}\r\n                                    </ul>\r\n                                </nav>\r\n                            </div>\r\n                            {isLast &&\r\n                            <div className=\"col\">\r\n                                <button className=\"btn btn-primary float-right\" onClick={submit}>Submit</button>\r\n                            </div>}\r\n                        </div>\r\n                    </div>}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}","import React from 'react'\nimport {useContainer} from 'unstated-next'\nimport {FieldChrome} from '../../display/FieldChrome'\nimport {FieldStateContainer} from '../../state/FieldStateContainer'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {FormElementProps} from '../FormElementProps'\n\nexport interface DropdownAttributes {\n    label: string\n    description: string\n    info?: string\n    options: string[]\n}\n\nexport const Dropdown = (props: FormElementProps<DropdownAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    const fieldStateContainer = useContainer(FieldStateContainer)\n    return <FieldChrome path={props.path} def={props.definition}>\n        <select\n            className=\"form-control custom-select\"\n            id={props.definition.fieldId}\n            value={formValuesContainer.getValue(props.path) || ''}\n            onChange={event => formValuesContainer.setValue(props.path, event.currentTarget.value)}\n            aria-describedby={props.definition.fieldId + '_description'}\n            onFocus={() => fieldStateContainer.focus(props.path)}\n            onBlur={() => fieldStateContainer.blur(props.path)}\n        >\n            <option value=\"\"/>\n            {props.definition.attributes.options.map((option) => <option value={option} key={option}>{option}</option>)}\n        </select>\n    </FieldChrome>\n}","import React from 'react'\nimport {useContainer} from 'unstated-next'\nimport {FieldChrome} from '../../display/FieldChrome'\nimport {FieldStateContainer} from '../../state/FieldStateContainer'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {FormElementProps} from '../FormElementProps'\n\ninterface TextInputAttributes {\n    label: string\n    description: string\n    info?: string\n}\n\nexport const TextInput = (props: FormElementProps<TextInputAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    const fieldStateContainer = useContainer(FieldStateContainer)\n\n    return (<FieldChrome path={props.path} def={props.definition}>\n        <input\n            type=\"text\"\n            className=\"form-control\"\n            id={props.definition.fieldId}\n            aria-describedby={props.path + '_description'}\n            value={formValuesContainer.getValue(props.path) || ''}\n            onChange={event => formValuesContainer.setValue(props.path, event.currentTarget.value)}\n            onFocus={() => fieldStateContainer.focus(props.path)}\n            onBlur={() => fieldStateContainer.blur(props.path)}\n        />\n    </FieldChrome>)\n}","import React from 'react'\nimport {FormElementProps} from '../FormElementProps'\n\ninterface HeadingAttributes {\n    level: number\n    text: string\n}\n\nexport const Heading = (props: FormElementProps<HeadingAttributes>) =>\n    React.createElement('h' + props.definition.attributes.level, null, props.definition.attributes.text)","import React from 'react'\nimport {FormElementProps} from '../FormElementProps'\n\n\ninterface ParagraphAttributes {\n    text: string\n}\n\nexport const Paragraph = (props: FormElementProps<ParagraphAttributes>) => <p>{props.definition.attributes.text}</p>","import React, {useState} from 'react'\nimport {useContainer} from 'unstated-next'\nimport {FieldChrome} from '../../display/FieldChrome'\nimport {FieldStateContainer} from '../../state/FieldStateContainer'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {FormElementProps} from '../FormElementProps'\n\ninterface ButtonGroupAttributes {\n    label: string\n    description?: string\n    info?: string\n    options: string[]\n}\n\nexport const ButtonGroup = (props: FormElementProps<ButtonGroupAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    const fieldStateContainer = useContainer(FieldStateContainer)\n    const value = formValuesContainer.getValue(props.path)\n    const [focus, setFocus] = useState<number | null>(null)\n\n    return (\n        <FieldChrome path={props.path} def={props.definition}>\n            <div className=\"btn-group-wrapper\"\n                 onFocus={() => fieldStateContainer.focus(props.path)}\n                 onBlur={() => fieldStateContainer.blur(props.path)}\n            >\n                <div className=\"btn-group btn-group-toggle\">\n                    {props.definition.attributes.options.map((option, index) => (\n                        <label\n                            className={'btn btn-outline-secondary' + (value === option ? ' active' : '') + (focus === index ? ' focus' : '')}\n                            key={props.path + '_OPTION_' + option}\n                            onFocus={() => setFocus(index)}\n                            onBlur={() => setFocus(null)}\n                        >\n                            <input\n                                type=\"radio\"\n                                value={option}\n                                checked={option === value}\n                                onChange={event => formValuesContainer.setValue(props.path, event.currentTarget.value)}\n                            />{option}\n                        </label>))\n                    }\n                </div>\n            </div>\n        </FieldChrome>)\n}","import {times} from 'lodash-es'\nimport React from 'react'\nimport {useContainer} from 'unstated-next'\nimport {Description} from '../../display/Description'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {ordinal} from '../../util'\nimport {ChildFormElements} from '../ChildFormElements'\nimport {FormElementProps} from '../FormElementProps'\n\n\nexport interface IterationAttributes {\n    label: string\n    itemLabel: string\n    description: string\n}\n\nexport const List = (props: FormElementProps<IterationAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    return (\n        <div className=\"form-group\">\n            <span className=\"h4 align-middle mr-2\">{props.definition.attributes.label}</span>\n            {props.definition.attributes.description && <Description path={props.path} text={props.definition.attributes.description}/>}\n            {times(formValuesContainer.getCollectionSize(props.path), (index: number) =>\n                <div className={'card border-bottom mb-3' + (index === 0 ? ' mt-2' : '')} key={props.path + '_COLLECTION_' + index}>\n                    <h5 className=\"card-header\">{ordinal(index + 1)} {props.definition.attributes.itemLabel}\n                        <button className=\"close text-dark\" onClick={() => formValuesContainer.deleteFromCollection(props.path, index)}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </h5>\n                    <div className=\"card-body pb-0\">\n                        {props.definition.children && <ChildFormElements childFormElements={props.definition.children} parentPath={props.path + '[' + index + ']'}/>}\n                    </div>\n                </div>\n            )}\n            <button className=\"btn btn-secondary d-inline\" onClick={() => formValuesContainer.addToCollection(props.path)}>Add</button>\n        </div>)\n}\n","import React from 'react'\r\nimport {useContainer} from 'unstated-next'\r\nimport {FormElementDef} from '../FormDef'\r\nimport {ShowIfContainer} from '../state/ShowIfContainer'\r\nimport {createPath} from '../util'\r\nimport {lookupElement} from './formElementTypes'\r\n\r\ninterface ChildFormElementsProps {\r\n    childFormElements: FormElementDef<any>[]\r\n    parentPath: string\r\n}\r\n\r\nexport const ChildFormElements = (props: ChildFormElementsProps) => {\r\n    const showIfContainer = useContainer(ShowIfContainer)\r\n    return (\r\n        <div>\r\n            {props.childFormElements.map((elementDef, index) => {\r\n                const path = createPath(props.parentPath, elementDef.fieldId)\r\n                if (!showIfContainer.shouldShow(path, elementDef)) {\r\n                    return null\r\n                }\r\n                const Child: any = lookupElement(elementDef.type)\r\n                return React.createElement(Child, {\r\n                    definition: elementDef,\r\n                    parentPath: props.parentPath,\r\n                    path: path,\r\n                    key: props.parentPath + '_' + index\r\n                })\r\n            })}\r\n        </div>)\r\n}","import React from 'react'\nimport FormDef from './FormDef'\nimport {ChildFormElements} from './formElements/ChildFormElements'\nimport {ConfigContainer} from './state/ConfigContainer'\nimport {ExpressionContainer} from './state/ExpressionContainer'\nimport {FieldStateContainer} from './state/FieldStateContainer'\nimport {FormStateContainer} from './state/FormStateContainer'\nimport {ShowIfContainer} from './state/ShowIfContainer'\nimport {ValidationContainer} from './state/ValidationContainer'\nimport {ValuesContainer} from './state/ValuesContainer'\n\nexport interface FormProps {\n    formDef: FormDef\n}\n\nexport const Form = (props: FormProps) =>\n    (<div className=\"p-2 container\">\n        <ConfigContainer.Provider initialState={props.formDef.config}>\n            <FormStateContainer.Provider>\n                <FieldStateContainer.Provider>\n                    <ValuesContainer.Provider>\n                        <ExpressionContainer.Provider>\n                            <ValidationContainer.Provider>\n                                <ShowIfContainer.Provider>\n                                    <ChildFormElements childFormElements={props.formDef.elements} parentPath=\"\"/>\n                                </ShowIfContainer.Provider>\n                            </ValidationContainer.Provider>\n                        </ExpressionContainer.Provider>\n                    </ValuesContainer.Provider>\n                </FieldStateContainer.Provider>\n            </FormStateContainer.Provider>\n        </ConfigContainer.Provider>\n    </div>)","import axios from 'axios'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Form} from './Form'\nimport FormDef from './FormDef'\nimport './index.css'\n\naxios.get<FormDef>('exampleFormDefinition.json')\n    .then(function (response) {\n        ReactDOM.render(\n            <Form formDef={response.data}/>,\n            document.getElementById('form')\n        )\n    })\n    .catch(function (error) {\n        console.error(error)\n        throw new Error(error)\n    })"],"sourceRoot":""}