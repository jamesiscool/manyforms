{"version":3,"sources":["util.ts","display/Description.tsx","state/FieldStateContainer.ts","state/ValuesContainer.ts","validation/ValidationRules.ts","state/ConfigContainer.ts","state/ValidationContainer.ts","formElements/formElementTypes.tsx","display/Label.tsx","display/FieldChrome.tsx","formElements/pagination/Accordion.tsx","formElements/input/Dropdown.tsx","formElements/input/TextInput.tsx","formElements/output/Heading.tsx","formElements/output/Paragraph.tsx","formElements/input/ButtonGroup.tsx","formElements/collection/List.tsx","formElements/ChildFormElements.tsx","Form.tsx","index.tsx"],"names":["createFiledPath","parentPath","fieldId","Description","props","react_default","a","createElement","id","path","className","text","FieldStateContainer","createContainer","_useState","useState","_useState2","Object","slicedToArray","fieldStates","setFieldStates","setEventNow","event","nextFieldStates","produce","draftFieldStates","fieldState","Date","now","get","focus","valueChanged","blur","ValuesContainer","initialState","arguments","length","undefined","fieldStateContainer","useContainer","formValues","setFormValues","setValue","value","nextFormValues","draftFormValues","set","getValue","addToCollection","oldCollection","newCollection","concat","toConsumableArray","deleteFromCollection","index","slice","getCollectionSize","collection","ruleValidatorMap","email","validate","isEmail","defaultMessage","alpha","isAlpha","numeric","isNumeric","alphanumeric","isAlphanumeric","currency","isCurrency","defaultConfig","showErrors","showErrorsDelay","disableNextWhenErrors","ConfigContainer","userConfig","config","assign","ValidationContainer","valuesContainer","nextTick","setNextTick","useEffect","setTimeout","shouldShowErrors","fieldDef","time","validation","foundValue","required","rules","firstRuleThatFails","find","validationRuleDef","name","message","hasErrorsRecursively","children","some","childFieldDef","type","childPath","formElementCollectionTypes","hasOwnProperty","size","Label","htmlFor","error","FieldChrome","def","attributes","label","Label_Label","description","Description_Description","formElementNonCollectionTypes","accordion","currentPageRef","useRef","currentPage","setCurrentPage","validationContainer","definition","isFirst","isLast","currentPageHasErrors","goToPage","newIndex","current","window","scroll","top","getBoundingClientRect","role","aria-multiselectable","map","page","key","ref","onClick","ChildFormElements_ChildFormElements","childFormElements","aria-label","classNames","disabled","console","log","dropdown","formValuesContainer","FieldChrome_FieldChrome","onChange","currentTarget","aria-describedby","options","option","textInput","onFocus","onBlur","heading","React","level","paragraph","buttonGroup","setFocus","checked","list","times","n","s","v","ordinal","itemLabel","aria-hidden","formElementTypes","ChildFormElements","elementDef","Child","foundType","warn","lookupElement","Form","Provider","formDef","elements","fetch","then","response","ok","Error","statusText","json","ReactDOM","render","Form_Form","document","getElementById"],"mappings":"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","file":"static/js/main.9c86bcf7.chunk.js","sourcesContent":["//export const createKey = () => (Math.random() + 1).toString(36).substring(2)\n\nexport const ordinal = (n: number): string => {\n    const s = ['th', 'st', 'nd', 'rd'],\n        v = n % 100\n    return n + (s[(v - 20) % 10] || s[v] || s[0])\n}\n\nexport const createFiledPath = (parentPath: string, fieldId?: string): string => {\n    if (!fieldId) {\n        return parentPath\n    }\n    if (parentPath !== '') {\n        return parentPath + '.' + fieldId\n    }\n    return fieldId\n\n}","import React from 'react'\n\ninterface DescriptionProps {\n    path: string,\n    text: string\n}\n\nexport const Description = (props: DescriptionProps) => (\n    <div id={props.path + '_description'} className=\"pt-2 text-muted description\">{props.text}</div>\n)","import produce from 'immer'\r\nimport {useState} from 'react'\r\nimport {createContainer} from 'unstated-next'\r\n\r\ntype Events = 'focus' | 'valueChanged' | 'blur'\r\n\r\ntype FieldState = {\r\n    [Event in Events]: number //Date.now() when field first got focused\r\n}\r\n\r\nexport function useFieldState() {\r\n    const [fieldStates, setFieldStates] = useState<{ [path: string]: FieldState }>({})\r\n    const get = (path: string) => fieldStates[path] || {}\r\n    const setEventNow = (path: string, event: Events) => {\r\n        const nextFieldStates = produce(fieldStates, draftFieldStates => {\r\n                const fieldState = draftFieldStates[path] || {}\r\n                if (!fieldState[event]) {\r\n                    fieldState[event] = Date.now()\r\n                }\r\n                draftFieldStates[path] = fieldState\r\n            }\r\n        )\r\n        setFieldStates(nextFieldStates)\r\n    }\r\n    const focus = (path: string) => setEventNow(path, 'focus')\r\n    const valueChanged = (path: string) => setEventNow(path, 'valueChanged')\r\n    const blur = (path: string) => setEventNow(path, 'blur')\r\n\r\n    return {fieldStates, get, focus, valueChanged, blur}\r\n}\r\n\r\nexport const FieldStateContainer = createContainer(useFieldState)","import produce from 'immer'\r\nimport get from 'lodash-es/get'\r\nimport set from 'lodash-es/set'\r\nimport {useState} from 'react'\r\nimport {createContainer, useContainer} from 'unstated-next'\r\nimport {FieldStateContainer} from './FieldStateContainer'\r\n\r\nexport function useValues(initialState = {}) {\r\n    const fieldStateContainer = useContainer(FieldStateContainer)\r\n\r\n    const [formValues, setFormValues] = useState(initialState)\r\n\r\n    const setValue = (path: string, value: any) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            set(draftFormValues, path, value)\r\n        })\r\n        setFormValues(nextFormValues)\r\n        fieldStateContainer.valueChanged(path)\r\n    }\r\n\r\n    function getValue(path: string): string {\r\n        return get(formValues, path)\r\n    }\r\n\r\n    const addToCollection = (path: string) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            const oldCollection = get(draftFormValues, path, [])\r\n            const newCollection = [...oldCollection, {}]\r\n            set(draftFormValues, path, newCollection)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const deleteFromCollection = (path: string, index: number) => {\r\n        const nextFormValues = produce(formValues, draftFormValues => {\r\n            const oldCollection = get(draftFormValues, path)\r\n            const newCollection = [...oldCollection.slice(0, index), ...oldCollection.slice(index + 1)]\r\n            set(draftFormValues, path, newCollection)\r\n        })\r\n        setFormValues(nextFormValues)\r\n    }\r\n    const getCollectionSize = (path: string) => {\r\n        const collection = get(formValues, path)\r\n        return collection ? collection.length : 0\r\n    }\r\n    return {formValues, setValue, getValue, addToCollection, deleteFromCollection, getCollectionSize}\r\n}\r\n\r\nexport const ValuesContainer = createContainer(useValues)","import isAlpha from 'validator/lib/isAlpha'\r\nimport isAlphanumeric from 'validator/lib/isAlphanumeric'\r\nimport isCurrency from 'validator/lib/isCurrency'\r\nimport isEmail from 'validator/lib/isEmail'\r\nimport isNumeric from 'validator/lib/isNumeric'\r\n\r\nexport interface ValidationRuleDef {\r\n    name: string,\r\n    arguments?: string[],\r\n    options?: {}\r\n    message?: string\r\n}\r\n\r\ninterface RuleValidator {\r\n    validate: (value: string, args?: string[]) => boolean,\r\n    defaultMessage: string\r\n}\r\n\r\nexport const ruleValidatorMap: { [name: string]: RuleValidator } = {\r\n    email: {\r\n        validate: (value: string) => isEmail(value),\r\n        defaultMessage: 'Please enter a email address'\r\n    },\r\n    alpha: {\r\n        validate: (value: string) => isAlpha(value),\r\n        defaultMessage: 'Please enter only letters'\r\n    },\r\n    numeric: {\r\n        validate: (value: string) => isNumeric(value),\r\n        defaultMessage: 'Please enter only numbers'\r\n    },\r\n    alphanumeric: {\r\n        validate: (value: string) => isAlphanumeric(value),\r\n        defaultMessage: 'Please enter only letters and numbers'\r\n    },\r\n    currency: {\r\n        validate: (value: string) => isCurrency(value),\r\n        defaultMessage: 'Please enter a currency amount'\r\n    }\r\n}","import {createContainer} from 'unstated-next'\r\n\r\ntype showErrors = 'immediately' | 'afterFocus' | 'afterValueChanged' | 'afterBlur' | 'nextOrSummit'\r\n\r\nexport interface Config {\r\n    showErrors: showErrors\r\n    showErrorsDelay: number //milliseconds\r\n    disableNextWhenErrors: boolean\r\n}\r\n\r\nconst defaultConfig: Config = {\r\n    showErrors: 'afterFocus',\r\n    showErrorsDelay: 5000,\r\n    disableNextWhenErrors: false\r\n}\r\n\r\nexport const useConfig = (userConfig = {}) => {\r\n    const config = Object.assign(defaultConfig, userConfig)\r\n    return {config}\r\n}\r\n\r\nexport const ConfigContainer = createContainer(useConfig)","import {useEffect, useState} from 'react'\r\nimport {createContainer, useContainer} from 'unstated-next'\r\nimport {FormElementDef} from '../formElements/FormElementDef'\r\nimport {isTypeACollection} from '../formElements/formElementTypes'\r\nimport {createFiledPath} from '../util'\r\nimport {ruleValidatorMap, ValidationRuleDef} from '../validation/ValidationRules'\r\nimport {ConfigContainer} from './ConfigContainer'\r\nimport {FieldStateContainer} from './FieldStateContainer'\r\nimport {ValuesContainer} from './ValuesContainer'\r\n\r\nfunction useValidation() {\r\n    const config = useContainer(ConfigContainer).config\r\n    const valuesContainer = useContainer(ValuesContainer)\r\n    const fieldStateContainer = useContainer(FieldStateContainer)\r\n\r\n    const [nextTick, setNextTick] = useState<number>(0)\r\n    useEffect(() => {\r\n        if (nextTick > Date.now()) {\r\n            setTimeout(() => setNextTick(0), nextTick - Date.now())\r\n        }\r\n    }, [nextTick])\r\n\r\n    const timeHasPassedAndShouldShowError = (time: number) => {\r\n        if (!config.showErrorsDelay || config.showErrorsDelay === 0) {\r\n            return true\r\n        } else if ((time + config.showErrorsDelay) < Date.now()) {\r\n            return true\r\n        } else {\r\n            setNextTick(time + config.showErrorsDelay)\r\n            return false\r\n        }\r\n    }\r\n\r\n    const shouldShowErrors = (path: string, fieldDef: FormElementDef<{}>): boolean => {\r\n        if (config.showErrors === 'immediately') {\r\n            return true\r\n        }\r\n        const fieldState = fieldStateContainer.get(path)\r\n        if (config.showErrors === 'afterFocus' && fieldState.focus) {\r\n            return timeHasPassedAndShouldShowError(fieldState.focus)\r\n        }\r\n        return false\r\n    }\r\n\r\n    const validate = (path: string, fieldDef: FormElementDef<{}>): string | undefined => {\r\n        if (!fieldDef.validation || !shouldShowErrors(path, fieldDef)) {\r\n            return undefined\r\n        }\r\n        const foundValue = valuesContainer.getValue(path)\r\n        if (fieldDef.validation.required && (!foundValue || foundValue.length <= 0)) {\r\n            return 'This field is required'\r\n        }\r\n        if (fieldDef.validation.rules) {\r\n            const firstRuleThatFails = fieldDef.validation.rules.find((validationRuleDef: ValidationRuleDef) => {\r\n                return !ruleValidatorMap[validationRuleDef.name].validate(foundValue)\r\n            })\r\n            if (firstRuleThatFails) {\r\n                return firstRuleThatFails.message || ruleValidatorMap[firstRuleThatFails.name].defaultMessage\r\n            }\r\n        }\r\n        return undefined\r\n    }\r\n\r\n    const hasErrorsRecursively = (path: string, fieldDef?: FormElementDef<{}>): boolean => {\r\n        if (!fieldDef) {\r\n            return false\r\n        }\r\n        if (validate(path, fieldDef)) {\r\n            return true\r\n        }\r\n        if (fieldDef.children) {\r\n            return fieldDef.children.some((childFieldDef) => {\r\n                const childPath = createFiledPath(path, childFieldDef.fieldId)\r\n                if (isTypeACollection(childFieldDef.type)) {\r\n                    const size = valuesContainer.getCollectionSize(childPath)\r\n                    for (let index = 0; index < size; index++) {\r\n                        if (hasErrorsRecursively(childPath + '[' + index + ']', childFieldDef)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                    return false\r\n                } else {\r\n                    return hasErrorsRecursively(childPath, childFieldDef)\r\n                }\r\n            })\r\n        }\r\n        return false\r\n    }\r\n\r\n    return {shouldShowErrors, validate, hasErrorsRecursively}\r\n}\r\n\r\nexport const ValidationContainer = createContainer(useValidation)","import React from 'react'\r\nimport {List} from './collection/List'\r\nimport {ButtonGroup} from './input/ButtonGroup'\r\nimport {Dropdown} from './input/Dropdown'\r\nimport {TextInput} from './input/TextInput'\r\nimport {Heading} from './output/Heading'\r\nimport {Paragraph} from './output/Paragraph'\r\nimport {Accordion} from './pagination/Accordion'\r\n\r\ninterface FormElementTypesMap {\r\n    [type: string]: React.ReactNode\r\n}\r\n\r\nexport const formElementNonCollectionTypes: FormElementTypesMap = {\r\n    'accordion': Accordion,\r\n    'dropdown': Dropdown,\r\n    'textInput': TextInput,\r\n    'heading': Heading,\r\n    'paragraph': Paragraph,\r\n    'buttonGroup': ButtonGroup,\r\n}\r\n\r\nexport const formElementCollectionTypes: FormElementTypesMap = {\r\n    'list': List\r\n}\r\n\r\nexport const formElementTypes: FormElementTypesMap = Object.assign(formElementNonCollectionTypes, formElementCollectionTypes)\r\n\r\nexport function lookupElement(type: string): React.ReactNode {\r\n    const foundType = formElementTypes[type]\r\n    if (!foundType) {\r\n        console.warn('Could not find form element type:' + type)\r\n        return () => <div>Could not find form element type {type}.</div>\r\n    }\r\n    return foundType\r\n}\r\n\r\nexport function isTypeACollection(type: string): boolean {\r\n    return formElementCollectionTypes.hasOwnProperty(type)\r\n}","import React from 'react'\n\ninterface LabelProps {\n    text: string,\n    htmlFor: string,\n    error: boolean\n}\n\nexport const Label = (props: LabelProps) => <label htmlFor={props.htmlFor} className={'mr-2 h5 ' + (props.error ? 'text-danger' : '')}>{props.text}</label>","import React from 'react'\nimport {useContainer} from 'unstated-next'\nimport {FormElementDef} from '../formElements/FormElementDef'\nimport {ValidationContainer} from '../state/ValidationContainer'\nimport {Description} from './Description'\nimport {Label} from './Label'\n\n\ninterface FieldChromeProps {\n    path: string\n    def: FormElementDef<any>\n    //children: React.ReactNode\n}\n\nexport const FieldChrome: React.FC<FieldChromeProps> = (props) => {\n    const validationContainer = useContainer(ValidationContainer)\n    const error = validationContainer.validate(props.path, props.def)\n\n    return (<div className=\"form-group py-2\">\n        {props.def.attributes.label && <Label htmlFor={props.path} text={props.def.attributes.label} error={!!error}/>}\n        {props.children}\n        {error && <div className=\"error-message text-danger pt-2\">{error}</div>}\n        {props.def.attributes.description && <Description path={props.path} text={props.def.attributes.description}/>}\n    </div>)\n}","import classNames from 'classnames'\r\nimport React, {useRef, useState} from 'react'\r\nimport {useContainer} from 'unstated-next'\r\nimport {ValidationContainer} from '../../state/ValidationContainer'\r\nimport {ChildFormElements} from '../ChildFormElements'\r\nimport {FormElementDef} from '../FormElementDef'\r\nimport {FormElementProps} from '../FormElementProps'\r\n\r\nexport interface AccordionAttributes {\r\n}\r\n\r\nexport const Accordion = (props: FormElementProps<AccordionAttributes>) => {\r\n    const currentPageRef = useRef<HTMLDivElement>(null)\r\n    const [currentPage, setCurrentPage] = useState<number>(0)\r\n    const validationContainer = useContainer(ValidationContainer)\r\n\r\n    if (!props.definition.children) {\r\n        return null\r\n    }\r\n\r\n    const isFirst = currentPage === 0\r\n    const isLast = currentPage === (props.definition.children!.length - 1)\r\n\r\n    const currentPageHasErrors = validationContainer.hasErrorsRecursively(props.path, props.definition.children[currentPage])\r\n\r\n    const goToPage = (newIndex: number) => {\r\n        setCurrentPage(newIndex)\r\n        if (currentPageRef && currentPageRef.current) {\r\n            window.scroll({top: currentPageRef.current.getBoundingClientRect().top - 100})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\r\n            {props.definition.children!.map((page, index) => (\r\n                <div className=\"card\" key={props.path + '_PAGE_' + index}>\r\n                    {currentPage === index && <div ref={currentPageRef}/>}\r\n                    <div className=\"card-header cursor-pointer\" onClick={() => goToPage(index)}>\r\n                        <h3 className=\"d-inline\">{page.attributes.label}</h3>{index < currentPage && <button className=\"link-button text-muted px-1\" onClick={() => goToPage(index)}><u>edit</u></button>}\r\n                    </div>\r\n                    {currentPage === index && <div className=\"card-body m-1\">\r\n                        {page.children && <ChildFormElements childFormElements={page.children as FormElementDef<any>[]} parentPath={props.parentPath}/>}\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <nav aria-label=\"Page navigation\">\r\n                                    <ul className=\"pagination mb-0\">\r\n                                        {!isFirst && <li className=\"page-item\">\r\n                                            <button className=\"page-link\" onClick={() => goToPage(currentPage - 1)}>Previous</button>\r\n                                        </li>}\r\n                                        {!isLast && <li className={classNames('page-item', {disabled: currentPageHasErrors})}>\r\n                                            <button className=\"page-link\" onClick={() => goToPage(currentPage + 1)} disabled={currentPageHasErrors}>Next</button>\r\n                                        </li>}\r\n                                    </ul>\r\n                                </nav>\r\n                            </div>\r\n                            {isLast &&\r\n                            <div className=\"col\">\r\n                                <button className=\"btn btn-primary float-right\" onClick={() => console.log('Submit')}>Submit</button>\r\n                            </div>}\r\n                        </div>\r\n                    </div>}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}","import React from 'react'\nimport {useContainer} from 'unstated-next'\nimport {FieldChrome} from '../../display/FieldChrome'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {FormElementProps} from '../FormElementProps'\n\nexport interface DropdownAttributes {\n    label: string\n    description: string\n    info?: string\n    options: string[]\n}\n\nexport const Dropdown = (props: FormElementProps<DropdownAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    return <FieldChrome path={props.path} def={props.definition}>\n        <select\n            className=\"form-control custom-select\"\n            id={props.definition.fieldId}\n            value={formValuesContainer.getValue(props.path) || ''}\n            onChange={event => formValuesContainer.setValue(props.path, event.currentTarget.value)}\n            aria-describedby={props.definition.fieldId + '_description'}\n            //onBlur={() => props.setState({path: props.path, name: 'touched', value: true})}\n        >\n            <option value=\"\" disabled={props.definition.validation && props.definition.validation.required}/>\n            {props.definition.attributes.options.map((option) => <option value={option} key={option}>{option}</option>)}\n        </select>\n    </FieldChrome>\n}","import React from 'react'\nimport {useContainer} from 'unstated-next'\nimport {FieldChrome} from '../../display/FieldChrome'\nimport {FieldStateContainer} from '../../state/FieldStateContainer'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {FormElementProps} from '../FormElementProps'\n\ninterface TextInputAttributes {\n    label: string\n    description: string\n    info?: string\n}\n\nexport const TextInput = (props: FormElementProps<TextInputAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    const fieldStateContainer = useContainer(FieldStateContainer)\n    return (<FieldChrome path={props.path} def={props.definition}>\n        <input\n            type=\"text\"\n            className=\"form-control\"\n            id={props.definition.fieldId}\n            aria-describedby={props.path + '_description'}\n            value={formValuesContainer.getValue(props.path) || ''}\n            onChange={event => formValuesContainer.setValue(props.path, event.currentTarget.value)}\n            onFocus={() => fieldStateContainer.focus(props.path)}\n            onBlur={() => fieldStateContainer.blur(props.path)}\n        />\n    </FieldChrome>)\n}","import React from 'react'\nimport {FormElementProps} from '../FormElementProps'\n\ninterface HeadingAttributes {\n    level: number\n    text: string\n}\n\nexport const Heading = (props: FormElementProps<HeadingAttributes>) =>\n    React.createElement('h' + props.definition.attributes.level, null, props.definition.attributes.text)","import React from 'react'\nimport {FormElementProps} from '../FormElementProps'\n\n\ninterface ParagraphAttributes {\n    text: string\n}\n\nexport const Paragraph = (props: FormElementProps<ParagraphAttributes>) => <p>{props.definition.attributes.text}</p>","import React, {useState} from 'react'\nimport {useContainer} from 'unstated-next'\nimport {FieldChrome} from '../../display/FieldChrome'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {FormElementProps} from '../FormElementProps'\n\ninterface ButtonGroupAttributes {\n    label: string\n    description?: string\n    info?: string\n    options: string[]\n}\n\nexport const ButtonGroup = (props: FormElementProps<ButtonGroupAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    const value = formValuesContainer.getValue(props.path)\n    const [focus, setFocus] = useState<number | null>(null)\n    return (\n        <FieldChrome path={props.path} def={props.definition}>\n            <div className=\"btn-group-wrapper\">\n                <div className=\"btn-group btn-group-toggle\">\n                    {props.definition.attributes.options.map((option, index) => (\n                        <label\n                            className={'btn btn-outline-secondary' + (value === option ? ' active' : '') + (focus === index ? ' focus' : '')}\n                            key={props.path + '_OPTION_' + option}\n                            onFocus={() => setFocus(index)}\n                            onBlur={() => setFocus(null)}\n                        >\n                            <input\n                                type=\"radio\"\n                                value={option}\n                                checked={option === value}\n                                onChange={event => formValuesContainer.setValue(props.path, event.currentTarget.value)}\n                            />{option}\n                        </label>))\n                    }\n                </div>\n            </div>\n        </FieldChrome>)\n}","import {times} from 'lodash-es'\nimport React from 'react'\nimport {useContainer} from 'unstated-next'\nimport {Description} from '../../display/Description'\nimport {ValuesContainer} from '../../state/ValuesContainer'\nimport {ordinal} from '../../util'\nimport {ChildFormElements} from '../ChildFormElements'\nimport {FormElementProps} from '../FormElementProps'\n\n\nexport interface IterationAttributes {\n    label: string\n    itemLabel: string\n    description: string\n}\n\nexport const List = (props: FormElementProps<IterationAttributes>) => {\n    const formValuesContainer = useContainer(ValuesContainer)\n    return (\n        <div className=\"form-group\">\n            <span className=\"h4 align-middle mr-2\">{props.definition.attributes.label}</span>\n            {props.definition.attributes.description && <Description path={props.path} text={props.definition.attributes.description}/>}\n            {times(formValuesContainer.getCollectionSize(props.path), (index: number) =>\n                <div className={'card border-bottom mb-3' + (index === 0 ? ' mt-2' : '')} key={props.path + '_COLLECTION_' + index}>\n                    <h5 className=\"card-header\">{ordinal(index + 1)} {props.definition.attributes.itemLabel}\n                        <button className=\"close text-dark\" onClick={() => formValuesContainer.deleteFromCollection(props.path, index)}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </h5>\n                    <div className=\"card-body pb-0\">\n                        {props.definition.children && <ChildFormElements childFormElements={props.definition.children} parentPath={props.path + '[' + index + ']'}/>}\n                    </div>\n                </div>\n            )}\n            <button className=\"btn btn-secondary d-inline\" onClick={() => formValuesContainer.addToCollection(props.path)}>Add</button>\n        </div>)\n}\n","import React from 'react'\r\nimport {createFiledPath} from '../util'\r\nimport {FormElementDef} from './FormElementDef'\r\nimport {lookupElement} from './formElementTypes'\r\n\r\ninterface ChildFormElementsProps {\r\n    childFormElements: FormElementDef<any>[]\r\n    parentPath: string\r\n}\r\n\r\nexport const ChildFormElements = (props: ChildFormElementsProps) => {\r\n    return (\r\n        <div>\r\n            {props.childFormElements.map((elementDef, index) => {\r\n                const Child: any = lookupElement(elementDef.type)\r\n                return React.createElement(Child, {\r\n                    definition: elementDef,\r\n                    parentPath: props.parentPath,\r\n                    path: createFiledPath(props.parentPath, elementDef.fieldId),\r\n                    key: props.parentPath + '_' + index\r\n                })\r\n            })}\r\n        </div>)\r\n}","import React from 'react'\nimport FormDef from './FormDef'\nimport {ChildFormElements} from './formElements/ChildFormElements'\nimport {ConfigContainer} from './state/ConfigContainer'\nimport {FieldStateContainer} from './state/FieldStateContainer'\nimport {ValidationContainer} from './state/ValidationContainer'\nimport {ValuesContainer} from './state/ValuesContainer'\n\nexport interface FormProps {\n    formDef: FormDef\n}\n\nexport const Form = (props: FormProps) =>\n    (<div className=\"p-2 container\">\n        <ConfigContainer.Provider initialState={props.formDef.config}>\n            <FieldStateContainer.Provider>\n                <ValuesContainer.Provider>\n                    <ValidationContainer.Provider>\n                        <ChildFormElements childFormElements={props.formDef.elements} parentPath=\"\"/>\n                    </ValidationContainer.Provider>\n                </ValuesContainer.Provider>\n            </FieldStateContainer.Provider>\n        </ConfigContainer.Provider>\n    </div>)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Form} from './Form'\nimport FormDef from './FormDef'\nimport './index.css'\n\nfetch('exampleFormDefinition.json')\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(response.statusText)\n        }\n        return response.json()\n    })\n    .then((formDef: FormDef) => {\n        ReactDOM.render(\n            <Form formDef={formDef}/>,\n            document.getElementById('form')\n        )\n    })"],"sourceRoot":""}